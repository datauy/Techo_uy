window.VERSION = "0.0.2";var pmb_im={controllers:angular.module("pmb_im.controllers",[]),services:angular.module("pmb_im.services",[])};pmb_im.app=angular.module("pmb_im",["ionic","ionic.wizard","ion-autocomplete","leaflet-directive","pmb_im.controllers","pmb_im.services","ngCordova"]).constant("ApiImEndpoint",{url:"http://www.montevideo.gub.uy"}).constant("ApiDataEndpoint",{url:"http://backend.educacion.thor.datauy.org"}).run(["$ionicPlatform","$rootScope","$cordovaKeyboard",function(e,t,n){t.VERSION=window.VERSION,e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!1),cordova.plugins.Keyboard.disableScroll(!1)),ionic.Platform.isFullScreen=!0,window.StatusBar&&StatusBar.styleDefault()})}]).config(["$stateProvider","$urlRouterProvider","$compileProvider","$ionicConfigProvider",function(e,t,n,o){n.debugInfoEnabled(!1),e.state("app",{cache:!1,url:"/app","abstract":!0,templateUrl:"templates/menu.html",controller:"AbsController"}).state("app.map",{cache:!1,url:"/map",views:{menuContent:{templateUrl:"templates/map.html",controller:"MapController"}}}).state("app.form",{cache:!1,url:"/form",views:{menuContent:{templateUrl:"templates/form.html",controller:"FormCtrl"}}}).state("app.intro",{cache:!1,url:"/intro",views:{menuContent:{templateUrl:"templates/intro.html",controller:"IntroCtrl"}}}),t.otherwise("/app/map")}]),pmb_im.controllers.controller("AbsController",["$scope",function(e){}]),pmb_im.controllers.controller("FormCtrl",["$scope","$state","$cordovaGeolocation","$stateParams","$ionicPlatform","$ionicPopup","LocationsService","DBService","$ionicSlideBoxDelegate","$ionicScrollDelegate",function(e,t,n,o,a,r,i,s,l,c){e.form={},e.form.edad=16,e.form.plan="",e.form.lugar="",e.form.turno="",e.form.nivel_aprobado="",e.next=function(){l.next()},e.previous=function(){l.previous()},e.go_to_map=function(){t.go("app.map")}}]),pmb_im.controllers.controller("IntroCtrl",["$scope","$state","$cordovaGeolocation","$stateParams","$ionicPlatform","$ionicPopup","LocationsService","DBService",function(e,t,n,o,a,r,i,s){var l=s.initDB();l.info().then(console.log.bind(console)),e.geolocate=function(){var e={timeout:3500,enableHighAccuracy:!0};n.getCurrentPosition(e).then(function(e){i.save_initial_position(e),t.go("app.form")},function(e){t.go("app.form")})},e.$on("$ionicView.enter",function(){null!=i.council_modal&&(i.council_modal.hide(),i.council_modal.remove()),e.geolocate()})}]),pmb_im.controllers.controller("MapController",["$scope","_","$cordovaCamera","$cordovaGeolocation","$compile","$ionicModal","$ionicPopup","leafletData","ConfigService","LocationsService","CkanService","PinService","AuthService","UserService","DBService","$timeout","$interval","$location","ErrorService","$ionicSlideBoxDelegate","$ionicScrollDelegate","PopUpService","ConnectivityService","$cordovaInAppBrowser","MapService","ModalService","SemaphoreService","ValidationService",function(e,t,n,o,a,r,i,s,l,c,u,d,p,m,_,g,f,h,v,y,b,w,I,k,E,P,A,O){e.asentamientos_layers=new Array,e.baseURL=l.baseURL,e.AppName=l.AppName,e.user_cached_image="./img/icon-user-anonymous.png",e.one_value_popup=null,e.myIntervals=new Array,e.$on("$ionicView.beforeEnter",function(){P.checkNoModalIsOpen(),_.initDB(),I.isOnline()?e.check_user_logged():e.set_offline_user(),document.getElementById("foot_bar").style.display="block",I.isOnline()&&e.create_online_map()}),e.$on("$ionicView.afterEnter",function(){s.getMap();""!=c.initial_lat?E.centerMapOnCoords(c.initial_lat,c.initial_lng,10):E.centerMapOnCoords(-34.901113,-56.164531,10),document.getElementById("spinner").style.display="none"}),e.openWebsite=function(e){var t={location:"no",clearcache:"yes",toolbar:"no"};k.open(e,"_blank",t).then(function(e){})["catch"](function(e){})},e.create_online_map=function(){e.map={defaults:{tileLayer:"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",minZoom:1,maxZoom:18,zoomControlPosition:"topleft"},markers:{},events:{map:{enable:["context"],logic:"emit"}},center:{}},e.loadPinsLayer(),e.map.center={lat:-34.901113,lng:-56.164531,zoom:10},s.getMap().then(function(t){t.on("moveend",e.hideOffScreenPins)})},e.next=function(){y.next()},e.previous=function(){y.previous()},e.back_to_map=function(e){e?(P.checkNoModalIsOpen(),document.getElementById("foot_bar").style.display="block",document.getElementById("spinner-inside-modal").style.display="none"):document.getElementById("spinner-inside-modal").style.display="none"},e.image=null,e.addImage=function(t,o,a,r){e.isUserPhoto=o,e.isCommentPhoto=a,e.isNewUserPhoto=r;var i=Camera.PictureSourceType.CAMERA,s=!0,l=!0;1==t&&(i=Camera.PictureSourceType.PHOTOLIBRARY,s=!1,l=!1);var c={quality:90,destinationType:Camera.DestinationType.FILE_URI,sourceType:i,allowEdit:!1,correctOrientation:s,encodingType:Camera.EncodingType.JPEG,popoverOptions:CameraPopoverOptions,saveToPhotoAlbum:l,targetWidth:500,targetHeight:500};n.getPicture(c).then(function(t){function n(t){window.FilePath.resolveNativePath(t,function(n){t="file://"+n,n.startsWith("file://")&&(t=n),1==e.isUserPhoto?e.profile.picture_url=t:1==e.isCommentPhoto?e.comment.file=t:1==e.isNewUserPhoto&&(e.newuser.picture_url=t),e.imgURI=t},function(e){alert("Error resolveNativePath"+e)})}n(t)},function(e){})},e.urlForImage=function(){var t="http://placehold.it/200x200";if(e.image){var n=e.image.substr(e.image.lastIndexOf("/")+1);t=cordova.file.dataDirectory+n}return t},e.scrollMe=function(e){h.hash(e);var t=b.$getByHandle("content");t.anchorScroll()},e.set_active_option=function(e){document.getElementById(e).className="option-active"},e.hide_special_divs=function(){document.getElementById("user-options-menu").style.display="none"},e.close_report_detail_modal=function(){P.checkNoModalIsOpen(),e.report_detail_id=null},e.locate=function(){o.getCurrentPosition().then(function(t){e.map.center.lat=t.coords.latitude,e.map.center.lng=t.coords.longitude,e.map.center.zoom=15,e.map.markers.now={lat:t.coords.latitude,lng:t.coords.longitude,message:"You Are Here",focus:!0,draggable:!1}},function(e){})},e.addMapControls=function(){document.getElementById("map_crosshair").style.display="block",document.getElementById("map_crosshair_button").style.display="block"},e.changeUserLocationPin=function(t,n,o){if(e.online_user_geo_array[o]){layer=e.online_user_geo_array[o];var a=new L.LatLng(t,n);layer.setLatLng(a)}},e.hideOffScreenPins=function(){},e.loadPinsLayer=function(){document.getElementById("spinner").style.display="block",s.getMap().then(function(t){u.getAllPolygons().then(function(n){(null==u.lastPinsResponse||u.lastPinsResponse&&u.lastPinsResponse!=n)&&(e.asentamientos_layers&&e.asentamientos_layers.forEach(function(e,n){t.removeLayer(e)}),u.lastPinsResponse=n.data,console.log(u.lastPinsResponse),u.lastPinsResponse.result.records.forEach(function(n){if("Polygon"==e.getTypeOfMapObject(n.wkt_geom)){var o=e.getOnlyCoordinatesPolygon(n.wkt_geom);L.polygon(o,{color:"red"}).bindPopup(n.NOM_AST+" - "+n.COD_AST+" - "+n.wkt_geom).addTo(t)}else"MultiPolygon"==e.getTypeOfMapObject(n.wkt_geom)}),document.getElementById("spinner").style.display="none")})})},e.getOnlyCoordinatesPolygon=function(t){t=t.replace("Polygon ((",""),t=t.replace("))","");var n=t.split(","),o=new Array;return n.forEach(function(t,n){t=t.trim();var a=t.split(" "),r=a[0],i=a[1],s=d.convertLatLongProj(r,i,e),l=[s.lat,s.lng];o.push(l)}),o},e.getTypeOfMapObject=function(e){return e.startsWith("MultiPolygon")?"MultiPolygon":e.startsWith("Polygon")?"Polygon":void 0},e.timeConverter=function(e){var t=new Date(1e3*e),n=t.getFullYear(),o=t.getMonth();o<10&&(o="0"+o);var a=t.getDate();a<10&&(a="0"+a);var r=t.getHours();r<10&&(r="0"+r);var i=t.getMinutes();i<10&&(i="0"+i);var s=(t.getSeconds(),a+"/"+o+"/"+n+" "+r+":"+i);return s},e.model=[],e.externalModel=[],e.selectedItems=[],e.preselectedSearchItems=[],e.clickedValueModel="",e.removedValueModel="",e.itemsRemoved=function(t){e.removedValueModel=t},e.user_options=function(){var t=document.getElementById("user-options-menu");if("block"==t.style.display)t.style.display="none";else{var n=m.name;null==n?e.show_anonymous_menu():e.show_user_menu()}},e.show_anonymous_menu=function(){var t=document.getElementById("user-options-menu"),n="<div id='auth_options'><div class='nonauth-link' ng-click='show_login_modal()'>Iniciar sesión</div>";n+="<div class='nonauth-link' ng-click='show_sign_up_modal()'>Registrarse</div></div>",t.innerHTML=n,a(t)(e),t.style.height="120px",t.style.width="150px",t.style.display="block"},e.show_user_menu=function(){var t=document.getElementById("user-options-menu"),n=m.name+"<div id='auth_options'><div class='user-logged-link' ng-click='show_edit_profile_modal()'>Mi perfil</div>";n+="<div class='user-logged-link' ng-click='sign_out()'>Cerrar sesión</div></div>",t.innerHTML=n,a(t)(e),t.style.height="220px",t.style.width="200px",t.style.display="block"},e.create_field_array=function(e,t,n){var o=new Array;return o.name=e,o.type=t,o.value=n,o},e.create_field_array_with_twoFields=function(e,t,n,o){var a=new Array;return a.name=e,a.type=t,a.value=n,a.secondValue=o,a},e.fix_fb_image_link=function(e){if(e.indexOf("http://graph.facebook.com")>=0){var t=e.split("http://graph.facebook.com"),n="http://graph.facebook.com"+t[1];return n}return e},e.log_in=function(t,n){if(A.takeIfAvailable("submit-form"))if(I.isOnline()){document.getElementById("spinner-inside-modal").style.display="block";var o=new Array;o.push(e.create_field_array("Usuario","notNull",t)),o.push(e.create_field_array("Contraseña","notNull",n)),v.check_fields(o,"error_container")?p.log_in(t,n).then(function(t){v.http_response_is_successful(t,"error_container")?(photo=e.fix_fb_image_link(e.getObjectDataFromResponse(t).Photo),"anon"==photo&&(photo="url(./img/icon-user-anonymous.png)"),m.save_user_data(e.getObjectDataFromResponse(t).Name,e.nonauth.password,photo,e.getObjectDataFromResponse(t).ShowLocation,e.getObjectDataFromResponse(t).Uid,e.getObjectDataFromResponse(t).Estado,e.getObjectDataFromResponse(t).Gender,e.getObjectDataFromResponse(t).InterestedIn),_.saveUser(e.getObjectDataFromResponse(t).Name,e.nonauth.password,photo,e.getObjectDataFromResponse(t).ShowLocation,e.getObjectDataFromResponse(t).Uid,e.getObjectDataFromResponse(t).Estado,e.getObjectDataFromResponse(t).Gender,e.getObjectDataFromResponse(t).InterestedIn),e.set_user_picture(1),document.getElementById("spinner-inside-modal").style.display="none",A.makeAvailableAgain("submit-form"),e.close_login_modal()):(A.makeAvailableAgain("submit-form"),document.getElementById("spinner-inside-modal").style.display="none")},function(e){document.getElementById("spinner-inside-modal").style.display="none",A.makeAvailableAgain("submit-form"),v.show_error_message("error_container",e.statusText)}):(document.getElementById("spinner-inside-modal").style.display="none",A.makeAvailableAgain("submit-form"))}else A.makeAvailableAgain("submit-form"),w.show_alert("Sin conexión a internet","Para iniciar sesión debe estar conectado a internet")},e.log_in_background=function(t,n){p.log_in(t,n).then(function(t){return v.http_response_is_successful_ajax(t)?(photo=e.fix_fb_image_link(e.getObjectDataFromResponse(t).Photo),"anon"==photo&&(photo="url(./img/icon-user-anonymous.png)"),m.save_user_data(e.getObjectDataFromResponse(t).Name,n,photo,e.getObjectDataFromResponse(t).ShowLocation,e.getObjectDataFromResponse(t).Uid,e.getObjectDataFromResponse(t).Estado,e.getObjectDataFromResponse(t).Gender,e.getObjectDataFromResponse(t).InterestedIn),_.saveUser(e.getObjectDataFromResponse(t).Name,n,photo,e.getObjectDataFromResponse(t).ShowLocation,e.getObjectDataFromResponse(t).Uid,e.getObjectDataFromResponse(t).Estado,e.getObjectDataFromResponse(t).Gender,e.getObjectDataFromResponse(t).InterestedIn),e.set_user_picture(1),1):0},function(e){return 0})},e.sign_out=function(){m.erase_user_data(),_.eraseUser(),document.getElementById("spinner").style.display="none",e.set_user_picture(0),document.getElementById("user-options-menu").style.display="none"},e.show_edit_profile_modal=function(){A.takeIfAvailable("open-modal")&&(document.getElementById("spinner").style.display="block",e.newuser=new Array,e.newuser.email=m.email,e.newuser.gender=m.gender,e.newuser.username=m.name,e.newuser.interested=m.interested,e.newuser.status=m.status,e.newuser.show_location=m.show_location,e.actual_photo=m.picture_url,null!=e.actual_photo||(e.actual_photo="./img/icon-user-anonymous.png"),"url(./img/icon-user-anonymous.png)"==e.actual_photo&&(e.actual_photo="./img/icon-user-anonymous.png"),P.checkNoModalIsOpen(),O.isMobileDevice()?r.fromTemplateUrl("templates/edit_profile_with_photo.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(e){document.getElementById("spinner").style.display="none",document.getElementById("user-options-menu").style.display="none",P.activeModal=e,document.getElementById("foot_bar").style.display="none",P.activeModal.show(),A.makeAvailableAgain("open-modal")}):r.fromTemplateUrl("templates/edit_profile_with_photo_desktop.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(e){document.getElementById("spinner").style.display="none",document.getElementById("user-options-menu").style.display="none",P.activeModal=e,document.getElementById("foot_bar").style.display="none",P.activeModal.show(),A.makeAvailableAgain("open-modal")}))},e.readURL=function(t,n){if(t.files&&t.files[0]){1==n?e.newuser.picture_url=t.files[0]:2==n?e.comment.photo=t.files[0]:e.report.file=t.files[0];var o=new FileReader;o.onload=function(e){document.getElementById("myImage").src=e.target.result},o.readAsDataURL(t.files[0])}},e.close_edit_profile_modal=function(){document.getElementById("foot_bar").style.display="block",P.checkNoModalIsOpen()},e.edit_profile_ok=function(){e.edit_profile()},e.getObjectDataFromResponse=function(e){return e.data?e.data:e},e.edit_profile=function(){if(A.takeIfAvailable("submit-form"))if(I.isOnline()){document.getElementById("spinner-inside-modal").style.display="block",e.newuser.password=m.password;var t=p.edit_user(e.newuser);null!=e.newuser.picture_url&&""!=e.newuser.picture_url&&O.isMobileDevice()?t.then(function(t){var n=JSON.parse(t.response);v.http_data_response_is_successful(n,"error_container")?(n=e.getObjectDataFromResponse(n),m.save_user_data(n.Name,e.newuser.password,n.Photo,n.ShowLocation,n.Uid,n.Estado,n.Gender,n.InterestedIn),_.saveUser(n.Name,e.newuser.password,n.Photo,n.ShowLocation,n.Uid,n.Estado,n.Gender,n.InterestedIn),A.makeAvailableAgain("submit-form"),document.getElementById("spinner-inside-modal").style.display="none",e.close_edit_profile_modal(),e.check_user_logged()):(A.makeAvailableAgain("submit-form"),document.getElementById("spinner-inside-modal").style.display="none")},function(e){var t="Código: "+e.code;t=t+" Origen: "+e.source,t=t+" Destino: "+e.target,t=t+" http_status: "+e.http_status,t=t+" Body: "+e.body,t=t+" Exception: "+e.exception,v.show_error_message("error_container","Hubo un error en el envío: "+t),A.makeAvailableAgain("submit-form"),document.getElementById("spinner-inside-modal").style.display="none"},function(t){g(function(){e.uploadProgress=t.loaded/t.total*100,document.getElementById("sent_label").innerHTML="Enviado: "+Math.round(e.uploadProgress)+"%"})}):t.success(function(t){document.getElementById("sent_label").innerHTML="Enviado: 100%",v.http_response_is_successful(t,"error_container")?(m.save_user_data(e.getObjectDataFromResponse(t).Name,e.newuser.password,e.getObjectDataFromResponse(t).Photo,e.getObjectDataFromResponse(t).ShowLocation,e.getObjectDataFromResponse(t).Uid,e.getObjectDataFromResponse(t).Estado,e.getObjectDataFromResponse(t).Gender,e.getObjectDataFromResponse(t).InterestedIn),_.saveUser(e.getObjectDataFromResponse(t).Name,e.newuser.password,e.getObjectDataFromResponse(t).Photo,e.getObjectDataFromResponse(t).ShowLocation,e.getObjectDataFromResponse(t).Uid,e.getObjectDataFromResponse(t).Estado,e.getObjectDataFromResponse(t).Gender,e.getObjectDataFromResponse(t).InterestedIn),document.getElementById("spinner-inside-modal").style.display="none",A.makeAvailableAgain("submit-form"),e.close_edit_profile_modal(),e.check_user_logged()):(A.makeAvailableAgain("submit-form"),document.getElementById("spinner-inside-modal").style.display="none")}).error(function(e,t,n,o){v.show_error_message("error_container",t),document.getElementById("spinner-inside-modal").style.display="none",A.makeAvailableAgain("submit-form")})}else A.makeAvailableAgain("submit-form"),w.show_alert("Sin conexión a internet","Para editar su perfil debe estar conectado a internet")},e.show_login_modal=function(){A.takeIfAvailable("open-modal")&&(e.nonauth=new Array,e.nonauth.user="",e.nonauth.password="",P.checkNoModalIsOpen(),r.fromTemplateUrl("templates/log_in.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(t){e.hide_special_divs(),P.activeModal=t,A.makeAvailableAgain("open-modal"),document.getElementById("foot_bar").style.display="none",P.activeModal.show()}))},e.login_ok=function(){e.log_in(e.nonauth.user,e.nonauth.password)},e.close_login_modal=function(){document.getElementById("foot_bar").style.display="block",P.checkNoModalIsOpen()},e.show_sign_up_modal=function(){A.takeIfAvailable("open-modal")&&(e.newuser=new Array,e.newuser.email="",e.newuser.password="",e.newuser.fullname="",e.newuser.id_doc="",e.newuser.telephone="",e.newuser.photo="",P.checkNoModalIsOpen(),O.isMobileDevice()?r.fromTemplateUrl("templates/sign_up.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(t){e.hide_special_divs(),P.activeModal=t,A.makeAvailableAgain("open-modal"),document.getElementById("foot_bar").style.display="none",P.activeModal.show()}):r.fromTemplateUrl("templates/sign_up_desktop.html",{scope:e,hardwareBackButtonClose:!1,animation:"slide-in-up"}).then(function(t){e.hide_special_divs(),P.activeModal=t,A.makeAvailableAgain("open-modal"),document.getElementById("foot_bar").style.display="none",P.activeModal.show()}))},e.close_sign_up_modal=function(){document.getElementById("foot_bar").style.display="block",P.checkNoModalIsOpen()},e.sign_up=function(){if(A.takeIfAvailable("submit-form"))if(I.isOnline()){document.getElementById("spinner-inside-modal").style.display="block";new Array;null!=e.newuser.picture_url&&""!=e.newuser.picture_url&&O.isMobileDevice()?p.create_user(e.newuser).then(function(t){document.getElementById("sent_label").innerHTML="Enviado: 100%",v.http_data_response_is_successful(t,"error_container")?(t=e.getObjectDataFromResponse(t),m.save_user_data(t.name,t.email,e.newuser.password,t.identity_document,t.phone,t.picture_url),m.save_user_data(t.Name,e.newuser.password,t.Photo,t.ShowLocation,t.Uid,t.Estado,t.Gender,t.InterestedIn),_.saveUser(t.Name,password,t.Photo,t.ShowLocation,t.Uid,t.Estado,t.Gender,t.InterestedIn),A.makeAvailableAgain("submit-form"),document.getElementById("spinner-inside-modal").style.display="none",e.close_edit_profile_modal(),e.check_user_logged()):(A.makeAvailableAgain("submit-form"),document.getElementById("spinner-inside-modal").style.display="none")},function(e){A.makeAvailableAgain("submit-form"),document.getElementById("spinner-inside-modal").style.display="none"}):p.create_user(e.newuser).then(function(t){if(v.http_response_is_successful(t,"error_container")){m.save_user_data(e.getObjectDataFromResponse(t).Name,e.newuser.password,e.getObjectDataFromResponse(t).Photo,e.getObjectDataFromResponse(t).ShowLocation,e.getObjectDataFromResponse(t).Uid,e.getObjectDataFromResponse(t).Estado,e.getObjectDataFromResponse(t).Gender,e.getObjectDataFromResponse(t).InterestedIn),_.saveUser(e.getObjectDataFromResponse(t).Name,e.newuser.password,e.getObjectDataFromResponse(t).Photo,e.getObjectDataFromResponse(t).ShowLocation,e.getObjectDataFromResponse(t).Uid,e.getObjectDataFromResponse(t).Estado,e.getObjectDataFromResponse(t).Gender,e.getObjectDataFromResponse(t).InterestedIn),A.makeAvailableAgain("submit-form"),document.getElementById("spinner-inside-modal").style.display="none",e.close_sign_up_modal();var n=i.alert({title:"Usuario creado con éxito",template:e.getObjectDataFromResponse(t).message});n.then(function(e){}),e.check_user_logged()}else A.makeAvailableAgain("submit-form"),document.getElementById("spinner-inside-modal").style.display="none"},function(e){A.makeAvailableAgain("submit-form"),document.getElementById("spinner-inside-modal").style.display="none",v.show_error_message("error_container",e.statusText)})}else A.makeAvailableAgain("submit-form"),w.show_alert("Sin conexión a internet","Para iniciar registrarse debe estar conectado a internet")},e.sign_up_ok=function(){e.sign_up()},e.check_user_logged=function(){var t=m.name;if(null==t){var n=_.getUser();n.then(function(t){null!=t.name&&""!=t.name&&"undefined"!=t.name?e.log_in_background(t.name,t.password):e.set_user_picture(0)})["catch"](function(t){e.set_user_picture(0)})}else null==m.picture_url||""==m.picture_url?e.set_user_picture(0):e.set_user_picture(1)},e.set_offline_user=function(){var t=m.name;if(null==t){var n=_.getUser();n.then(function(t){null!=t.name&&""!=t.name&&"undefined"!=t.name?m.save_user_data(t.name,t.password,t.picture_url,t.show_location):e.set_user_picture(0)})["catch"](function(t){e.set_user_picture(0)})}else null==m.picture_url||""==m.picture_url?e.set_user_picture(0):e.set_user_picture(1)},e.set_user_picture=function(t){document.getElementById("user_picture");0==t?e.user_cached_image="./img/icon-user-anonymous.png":null!=m.picture_url&&""!=m.picture_url?e.user_cached_image=m.picture_url:e.user_cached_image="./img/icon-user-anonymous.png"},e.find_me=function(){e.set_active_option("button-find-me"),e.hide_special_divs();var t={timeout:1e4,enableHighAccuracy:!0};o.getCurrentPosition(t).then(function(t){e.map.center.lat=t.coords.latitude,e.map.center.lng=t.coords.longitude,c.save_new_report_position(t.coords.latitude,t.coords.longitude),I.isOnline()?e.map.center.zoom=18:e.map.center.zoom=16,e.map.markers.now={lat:t.coords.latitude,lng:t.coords.longitude,message:"<p align='center'>Te encuentras aquí <br/> <a ng-click='new_report(1);'>Iniciar reporte en tu posición actual</a></p>",focus:!0,draggable:!1,getMessageScope:function(){return e}}},function(t){e.openCouncilSelector()})}}]),pmb_im.services.factory("AuthService",["$http","$cordovaFileTransfer","ConfigService","ValidationService",function(e,t,n,o){var a=n.baseURL+"/api/";return{log_in:function(t,n){var o="user="+t+"&password="+n;return e.post(a+"login",o,{withCredentials:!0,headers:{"Content-Type":"application/x-www-form-urlencoded"}})},sign_out:function(t,n){return e.get(a+"sign_out",{withCredentials:!0,params:{password_sign_in:t,email:n}})},create_user:function(n){if(n.picture_url&&o.isMobileDevice()){var r={fileKey:"photo",withCredentials:!0,params:{user:n.username,password:n.password,email:n.email,gender:n.gender,interested:n.interested,status:n.status,show_location:n.show_location}},i=!0;return t.upload(a+"create_user",n.picture_url,r,i)}if(n.picture_url){var s=new FormData;return s.append("photo",n.picture_url),s.append("user",n.username),s.append("password",n.password),s.append("email",n.email),s.append("gender",n.gender),s.append("interested",n.interested),s.append("status",n.status),s.append("show_location",n.show_location),e.post(a+"create_user",s,{headers:{"Content-Type":void 0},transformRequest:angular.identity})}var l="user="+n.username+"&password="+n.password+"&email="+n.email+"&gender="+n.gender;return l=l+"&interested="+n.interested+"&status="+n.status+"&show_location="+n.show_location,e.post(a+"create_user",l,{withCredentials:!0,headers:{"Content-Type":"application/x-www-form-urlencoded"}})},password_recovery:function(t){return e.get(a+"forgot_password",{params:{login_email:t}})},password_change:function(t,n,o,r){var i="email="+t+"&password_sign_in="+n+"&new_password="+o+"&confirm="+r;return e.post(a+"change_password",i,{headers:{"Content-Type":"application/x-www-form-urlencoded"}})},edit_user:function(n){if(n.picture_url&&o.isMobileDevice()){var r={fileKey:"photo",withCredentials:!0,params:{user:n.username,password:n.password,email:n.email,gender:n.gender,interested:n.interested,status:n.status,show_location:n.show_location}},i=!0;return t.upload(a+"edit_profile",n.picture_url,r,i)}var s="user="+n.username+"&password="+n.password+"&email="+n.email+"&gender="+n.gender;if(s=s+"&interested="+n.interested+"&status="+n.status+"&show_location="+n.show_location,n.picture_url){var l=new FormData;return l.append("photo",n.picture_url),l.append("user",n.username),l.append("password",n.password),l.append("email",n.email),l.append("gender",n.gender),l.append("interested",n.interested),l.append("status",n.status),l.append("show_location",n.show_location),e.post(a+"edit_profile",l,{headers:{"Content-Type":void 0},transformRequest:angular.identity})}return e.post(a+"edit_profile",s,{withCredentials:!0,headers:{"Content-Type":"application/x-www-form-urlencoded"}})}}}]),pmb_im.services.factory("CkanService",["$http","leafletData","ConfigService",function(e,t,n){return{lastPinsResponse:null,getAllPolygons:function(){return e.get(n.ckanAllPolygonsURL,{headers:{Authorization:"d7e78b6e-3eed-4d69-8387-ab0196121a51"}})}}}]),pmb_im.services.factory("ConfigService",["$http",function(e){var t={};return t.baseURL="http://backend.techouy.thor.datauy.org",t.ckanAllPolygonsURL="/ckan",t.AppName="TECHOPARAMIPAIS - URUGUAY",t}]),pmb_im.services.factory("ConnectivityService",["$cordovaNetwork",function(e){return{isOnline:function(){return!0},isOffline:function(){return!1}}}]),pmb_im.services.factory("DBService",["$q",function(e){function t(e,t,o,a,r,i,s,l){var c={_id:"user-logged",name:e,password:t,picture_url:o,show_location:a,uid:r,status:i,gender:s,interested:l};n().then(function(e){return c._rev=e._rev,m.put(c)})["catch"](function(e){return m.put(c)})}function n(){return m.get("user-logged")}function o(){m.get("user-logged").then(function(e){return m.remove(e)})}function a(){return m=new PouchDB("tomamosuna_local_db")}function r(e){var t=new Date,n="report_"+t.getFullYear()+(t.getMonth()+1)+t.getDate()+t.getMilliseconds();return e._id=n,m.put(e)}function i(e){return m.put(e)}function s(){return m.get("categories-list")}function l(e){s().then(function(t){return e._rev=t._rev,m.put(e)})["catch"](function(t){return e._id="categories-list",m.put(e)})}function c(e){return m.get(e)}function u(){return m.allDocs({include_docs:!0,attachments:!1,startkey:"report_",endkey:"report_￿"})}function d(e){m.get(e).then(function(e){return m.remove(e)})}function p(e){return m.remove(e)}var m;return{initDB:a,saveUser:t,getUser:n,eraseUser:o,saveReport:r,getReport:c,getAllReports:u,updateReport:i,deleteReport:d,deleteGivenReport:p,getCategories:s,saveCategories:l}}]),pmb_im.services.factory("ErrorService",["$http","$ionicPopup","ValidationService",function(e,t,n){return{http_response_is_successful:function(e,t){var n=document.getElementById(t);return e.data&&"success"==e.data.Status||"success"==e.Status?(n.style.display="none",!0):(e.data?n.innerHTML="<h3>"+e.data.Message+"</h3>":n.innerHTML="<h3>"+e.Message+"</h3>",n.style.display="block",!1)},http_response_is_successful_ajax:function(e){return 0!=e.data.result},http_response_is_successful_popup:function(e){if(0==e.data.result){var n=t.alert({title:"Error",template:e.data.message});return n.then(function(e){return!1}),!1}return!0},http_data_response_is_successful:function(e,t){var n=document.getElementById(t);return"success"!=e.Status?(n.innerHTML="<h3>"+e.Message+"</h3>",n.style.display="block",!1):(n.style.display="none",!0)},http_data_response_is_successful_ajax:function(e){return 0!=e.result},show_error_message:function(e,t){var n=document.getElementById(e);return n.innerHTML="<h3>"+t+"</h3>",n.style.display="block",!1},show_error_message_popup:function(e){var n=t.alert({title:"Error",template:e});return n.then(function(e){return!1}),!1},check_fields:function(e,t){var o="";if(e.forEach(function(e){"notNull"==e.type&&(n.validate_not_empty(e.value)||(o=o+'<h3>- El campo "'+e.name+'" no puede estar vacío.</h3>')),"email"==e.type&&(n.validate_email(e.value)||(o=o+'<h3>- El campo "'+e.name+'" no es una dirección de correo válida.</h3>')),"iddoc_uy"==e.type&&(n.validate_iddoc_uy(e.value)||(o=o+'<h3>- El campo "'+e.name+'" no es una cédula uruguaya válida.</h3>')),"two_words"==e.type&&(n.validate_two_words(e.value)||(o=o+'<h3>- El campo "'+e.name+'" debe contener al menos dos palabras.</h3>')),"equalsTo"==e.type&&(n.validate_equalsTo(e.value,e.secondValue)||(o=o+'<h3>- Los campos "'+e.name+'" no coinciden.</h3>'))}),""==o)return!0;var a=document.getElementById(t);return a.innerHTML=o,a.style.display="block",!1}}}]),pmb_im.services.factory("Loader",["$ionicLoading","$timeout","$ionicPopup",function(e,t,n){var o={showLoading:function(t){t=t||"Loading...",e.show({template:t})},hideLoading:function(){e.hide()},toggleLoadingWithMessage:function(e,n){var o=this;o.showLoading(e),t(function(){o.hideLoading()},n||3e3)},confirmPopup:function(e,t){var o=n.confirm({title:e,template:t});return o},showAlert:function(e,t){var o=n.alert({title:e,template:t});return o}};return o}]),pmb_im.services.factory("LocationsService",[function(){var e={};return e.initial_lat="",e.initial_lng="",e.last_user_lat="",e.last_user_lng="",e.council_modal=null,e.selected_council=null,e.selectCouncil=function(t){e.selected_council=t},e.save_initial_position=function(t){e.initial_lat=t.coords.latitude,e.initial_lng=t.coords.longitude},e.save_last_user_position=function(t,n){e.last_user_lat=t,e.last_user_lng=n},e.savedLocations=[],e}]),pmb_im.services.factory("MapService",["leafletData","$compile",function(e,t){proj4.defs("EPSG:32721","+proj=utm +zone=21 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs");var n={};return n.goToPlace=function(n,o,a,r){var i={type:"FeatureCollection",crs:{type:"name",properties:{name:"urn:ogc:def:crs:EPSG::32721"}},features:[{type:"Feature",geometry:{type:"Point",coordinates:[o,a]},properties:{nombre:n}}]};e.getMap().then(function(e){var n,o=L.Proj.geoJson(i,{pointToLayer:function(e,o){n=o;var a="<p align='center'>"+e.properties.nombre+" <br/> <a ng-click='new_report_from_latlon("+n.lat+","+n.lng+");'>Iniciar reporte aquí</a></p>",i=t(a)(r);return L.marker(o).bindPopup(i[0])}});o.addTo(e),e.setView(n,18),o.openPopup()})},n.centerMapOnCoords=function(t,n,o){e.getMap().then(function(e){e.setView(new L.LatLng(t,n),o)})},n}]),pmb_im.services.factory("ModalService",[function(){var e={};return e.activeModal=null,e.checkNoModalIsOpen=function(){e.activeModal&&(e.activeModal.hide(),e.activeModal.remove())},e}]),pmb_im.services.factory("PinService",["$http","leafletData","ConfigService",function(e,t,n){function o(e){angular.extend(this,e)}var a=n.baseURL+"/sites/tomamos_una/files/json/users_geo.json",r=n.baseURL+"/api/";return proj4.defs("EPSG:32721","+proj=utm +zone=21 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs"),o.convertLatLongProj=function(e,t,n){var o,a={type:"FeatureCollection",crs:{type:"name",properties:{name:"urn:ogc:def:crs:EPSG::32721"}},features:[{type:"Feature",geometry:{type:"Point",coordinates:[e,t]},properties:{}}]};L.Proj.geoJson(a,{pointToLayer:function(e,t){return o=t,t}});return o},o.getAll=function(){return e.get(a,{cache:!1,params:{hash_id:Math.random()}})},o.sendUserLocation=function(t,n,o,a,i){var s="user="+o+"&password="+a+"&lat="+t+"&lon="+n+"&uid="+i;return e.post(r+"send_user_position",s,{withCredentials:!0,headers:{"Content-Type":"application/x-www-form-urlencoded"}})},o._all=[],o.current={},o.lastPinsResponse=null,o.build=function(e){return new o(e)},o.prototype.setLatLng=function(e){this.lat=e.lat,this.lon=e.lng},o}]),pmb_im.services.factory("PopUpService",["$ionicPopup","ValidationService",function(e,t){return{show_alert:function(t,n){var o=e.alert({title:t,template:n});return o.then(function(e){return!0}),!0},confirmPopup:function(t,n){var o=e.confirm({title:t,template:n});return o},askForOneValuePopUp:function(n,o,a,r,i){$scope=n;var s=e.show({template:r+': <input type="text" id="one_value_popup"><div id="error_container_inside"></div>',
title:o,subTitle:a,scope:$scope,buttons:[{text:"Cancelar"},{text:"<b>Enviar</b>",type:"button-positive",onTap:function(e){var n="",o=document.getElementById("one_value_popup").value;if("notNull"==i&&(t.validate_not_empty(o)||(n=n+'<h3>- El campo "'+r+'" no puede estar vacío.</h3>')),"email"==i&&(t.validate_email(o)||(n=n+'<h3>- El campo "'+r+'" no es una dirección de correo válida.</h3>')),"iddoc_uy"==i&&(t.validate_iddoc_uy(o)||(n=n+'<h3>- El campo "'+r+'" no es una cédula uruguaya válida.</h3>')),"two_words"==i&&(t.validate_two_words(o)||(n=n+'<h3>- El campo "'+r+'" debe contener al menos dos palabras.</h3>')),""==n)return o;var a=document.getElementById("error_container_inside");a.innerHTML=n,a.style.display="block",e.preventDefault()}}]});return s}}}]),pmb_im.services.factory("SemaphoreService",[function(){var e={};return e.semaphores=new Array,e.semaphores["open-modal"]="available",e.semaphores["submit-form"]="available",e.semaphores["submit-location"]="available",e.semaphores.can_talk="available",e.takeIfAvailable=function(t){return"available"==e.semaphores[t]&&(e.semaphores[t]="occupied",!0)},e.makeAvailableAgain=function(t){return"occupied"==e.semaphores[t]&&(e.semaphores[t]="available",!0)},e}]),pmb_im.services.factory("locationAPI",["$http","$q","ApiImEndpoint","ApiDataEndpoint","ConfigService","LocationsService",function(e,t,n,o,a,r){var i="ubicacionesRestProd",s={};return s.searchLocationByStr=function(t){var n=a.baseURL+"/ajax/geocode?term="+r.selected_council+","+t;return e.get(n,{method:"GET",params:{}})},s.searchEsquinaByStr=function(t){var n=a.baseURL+"/ajax/geocode?term="+r.selected_council+","+t.calle+","+t.esquina;return e.get(n,{method:"GET",params:{}})},s.getLocationGeom=function(t){for(var o=n.url+"/"+i+s.getParamPathByTipo(t.tipo),a=0;a<t.pathParams.length;a++)o+="/"+t.pathParams[a];return e.get(baseURL).then(function(e){return e.data})},s.getLocationGeomPMB=function(t,n,o){var i=a.baseURL+"/ajax/geocode?term="+r.selected_council+","+t+","+n+","+o;return e.get(i)},s.getParamPathByTipo=function(e){var t={ESQUINA:"/esquina",DIRECCION:"/direccion"};return t[e]},s}]),pmb_im.services.factory("_",[function(){return window._}]),pmb_im.services.factory("UserService",["$http",function(e){var t={};return t.uid=null,t.name=null,t.email=null,t.password=null,t.picture_url="url(./img/icon-user-anonymous.png)",t.show_location=null,t.save_user_data=function(e,n,o,a,r,i,s,l){t.uid=r,t.name=e,t.password=n,t.picture_url=o,t.show_location=a,t.status=i,t.gender=s,t.interested=l},t.erase_user_data=function(){t.name=null,t.email=null,t.password=null,t.identity_document=null,t.phone=null,t.picture_url=null},t.get_user_data=function(){},t.add_photo=function(e){t.picture_url=e},t.isLogged=function(){return null!=t.name&&""!=t.name},t}]),pmb_im.services.factory("ValidationService",["$http","$ionicPopup",function(e,t){return{isMobileDevice:function(){return!!window.cordova},validate_not_empty:function(e){return null!=e&&"undefined"!=e&&""!=e},validate_two_words:function(e){if(null!=e&&"undefined"!=e&&""!=e){var t=e.split(" ").filter(function(e){return""!==e});return t.length>1}return!1},validate_equalsTo:function(e,t){return e==t},validate_email:function(e){if(null!=e&&"undefined"!=e&&""!=e){var t=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return t.test(e)}return!1},validate_iddoc_uy:function(e){if(null!=e&&"undefined"!=e&&""!=e){e=e.replace(/\D/g,"");var t=e[e.length-1],n=0,o=0;if(e.length<=6)for(o=e.length;o<7;o++)e="0"+e;for(o=0;o<7;o++)n+=parseInt("2987634"[o])*parseInt(e[o])%10;var a;return a=n%10===0?0:10-n%10,t==a}return!1}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnRyb2xsZXJzL2Ficy5jdHJsLmpzIiwiY29udHJvbGxlcnMvZm9ybS5jcnRsLmpzIiwiY29udHJvbGxlcnMvaW50cm8uY3RybC5qcyIsImNvbnRyb2xsZXJzL21hcC5jdHJsLmpzIiwic2VydmljZXMvYXV0aC5zZXJ2aWNlcy5qcyIsInNlcnZpY2VzL2NrYW4uc2VydmljZS5qcyIsInNlcnZpY2VzL2NvbmZpZy5zZXJ2aWNlcy5qcyIsInNlcnZpY2VzL2Nvbm5lY3Rpdml0eS5zZXJ2aWNlcy5qcyIsInNlcnZpY2VzL2RiLnNlcnZpY2VzLmpzIiwic2VydmljZXMvZXJyb3Iuc2VydmljZXMuanMiLCJzZXJ2aWNlcy9sb2FkZXIuc2VydmljZXMuanMiLCJzZXJ2aWNlcy9sb2NhdGlvbnNTZXJ2aWNlLmpzIiwic2VydmljZXMvbWFwLnNlcnZpY2VzLmpzIiwic2VydmljZXMvbW9kYWxTZXJ2aWNlLmpzIiwic2VydmljZXMvcGluLnNlcnZpY2UuanMiLCJzZXJ2aWNlcy9wb3B1cC5zZXJ2aWNlcy5qcyIsInNlcnZpY2VzL3NlbWFwaG9yZS5zZXJ2aWNlLmpzIiwic2VydmljZXMvdWJpY2FjaW9uZXMuc2VydmljZXMuanMiLCJzZXJ2aWNlcy91bmRlcnNjb3JlLnNlcnZpY2UuanMiLCJzZXJ2aWNlcy91c2VyLnNlcnZpY2VzLmpzIiwic2VydmljZXMvdmFsaWRhdGlvbi5zZXJ2aWNlcy5qcyJdLCJuYW1lcyI6WyJwbWJfaW0iLCJjb250cm9sbGVycyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJzZXJ2aWNlcyIsImFwcCIsImNvbnN0YW50IiwidXJsIiwicnVuIiwiJGlvbmljUGxhdGZvcm0iLCIkcm9vdFNjb3BlIiwiJGNvcmRvdmFLZXlib2FyZCIsIlZFUlNJT04iLCJ3aW5kb3ciLCJyZWFkeSIsImNvcmRvdmEiLCJwbHVnaW5zIiwiS2V5Ym9hcmQiLCJoaWRlS2V5Ym9hcmRBY2Nlc3NvcnlCYXIiLCJkaXNhYmxlU2Nyb2xsIiwiaW9uaWMiLCJQbGF0Zm9ybSIsImlzRnVsbFNjcmVlbiIsIlN0YXR1c0JhciIsInN0eWxlRGVmYXVsdCIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJGNvbXBpbGVQcm92aWRlciIsIiRpb25pY0NvbmZpZ1Byb3ZpZGVyIiwiZGVidWdJbmZvRW5hYmxlZCIsInN0YXRlIiwiY2FjaGUiLCJhYnN0cmFjdCIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsInZpZXdzIiwibWVudUNvbnRlbnQiLCJvdGhlcndpc2UiLCIkc2NvcGUiLCIkc3RhdGUiLCIkY29yZG92YUdlb2xvY2F0aW9uIiwiJHN0YXRlUGFyYW1zIiwiJGlvbmljUG9wdXAiLCJMb2NhdGlvbnNTZXJ2aWNlIiwiREJTZXJ2aWNlIiwiJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZSIsIiRpb25pY1Njcm9sbERlbGVnYXRlIiwiZm9ybSIsImVkYWQiLCJwbGFuIiwibHVnYXIiLCJ0dXJubyIsIm5pdmVsX2Fwcm9iYWRvIiwibmV4dCIsInByZXZpb3VzIiwiZ29fdG9fbWFwIiwiZ28iLCJkYiIsImluaXREQiIsImluZm8iLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsImJpbmQiLCJnZW9sb2NhdGUiLCJwb3NPcHRpb25zIiwidGltZW91dCIsImVuYWJsZUhpZ2hBY2N1cmFjeSIsImdldEN1cnJlbnRQb3NpdGlvbiIsInBvc2l0aW9uIiwic2F2ZV9pbml0aWFsX3Bvc2l0aW9uIiwiZXJyIiwiJG9uIiwiY291bmNpbF9tb2RhbCIsImhpZGUiLCJyZW1vdmUiLCJfIiwiJGNvcmRvdmFDYW1lcmEiLCIkY29tcGlsZSIsIiRpb25pY01vZGFsIiwibGVhZmxldERhdGEiLCJDb25maWdTZXJ2aWNlIiwiQ2thblNlcnZpY2UiLCJQaW5TZXJ2aWNlIiwiQXV0aFNlcnZpY2UiLCJVc2VyU2VydmljZSIsIiR0aW1lb3V0IiwiJGludGVydmFsIiwiJGxvY2F0aW9uIiwiRXJyb3JTZXJ2aWNlIiwiUG9wVXBTZXJ2aWNlIiwiQ29ubmVjdGl2aXR5U2VydmljZSIsIiRjb3Jkb3ZhSW5BcHBCcm93c2VyIiwiTWFwU2VydmljZSIsIk1vZGFsU2VydmljZSIsIlNlbWFwaG9yZVNlcnZpY2UiLCJWYWxpZGF0aW9uU2VydmljZSIsImFzZW50YW1pZW50b3NfbGF5ZXJzIiwiQXJyYXkiLCJiYXNlVVJMIiwiQXBwTmFtZSIsInVzZXJfY2FjaGVkX2ltYWdlIiwib25lX3ZhbHVlX3BvcHVwIiwibXlJbnRlcnZhbHMiLCJjaGVja05vTW9kYWxJc09wZW4iLCJpc09ubGluZSIsImNoZWNrX3VzZXJfbG9nZ2VkIiwic2V0X29mZmxpbmVfdXNlciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsImRpc3BsYXkiLCJjcmVhdGVfb25saW5lX21hcCIsImdldE1hcCIsImluaXRpYWxfbGF0IiwiY2VudGVyTWFwT25Db29yZHMiLCJpbml0aWFsX2xuZyIsIm9wZW5XZWJzaXRlIiwib3B0aW9ucyIsImxvY2F0aW9uIiwiY2xlYXJjYWNoZSIsInRvb2xiYXIiLCJvcGVuIiwiZXZlbnQiLCJtYXAiLCJkZWZhdWx0cyIsInRpbGVMYXllciIsIm1pblpvb20iLCJtYXhab29tIiwiem9vbUNvbnRyb2xQb3NpdGlvbiIsIm1hcmtlcnMiLCJldmVudHMiLCJlbmFibGUiLCJsb2dpYyIsImNlbnRlciIsImxvYWRQaW5zTGF5ZXIiLCJsYXQiLCJsbmciLCJ6b29tIiwib24iLCJoaWRlT2ZmU2NyZWVuUGlucyIsImJhY2tfdG9fbWFwIiwiaW1hZ2UiLCJhZGRJbWFnZSIsImlzRnJvbUFsYnVtIiwiaXNVc2VyUGhvdG8iLCJpc0NvbW1lbnRQaG90byIsImlzTmV3VXNlclBob3RvIiwic291cmNlIiwiQ2FtZXJhIiwiUGljdHVyZVNvdXJjZVR5cGUiLCJDQU1FUkEiLCJmaXhfb3JpZW50YXRpb24iLCJzYXZlX3RvX2dhbGxlcnkiLCJQSE9UT0xJQlJBUlkiLCJxdWFsaXR5IiwiZGVzdGluYXRpb25UeXBlIiwiRGVzdGluYXRpb25UeXBlIiwiRklMRV9VUkkiLCJzb3VyY2VUeXBlIiwiYWxsb3dFZGl0IiwiY29ycmVjdE9yaWVudGF0aW9uIiwiZW5jb2RpbmdUeXBlIiwiRW5jb2RpbmdUeXBlIiwiSlBFRyIsInBvcG92ZXJPcHRpb25zIiwiQ2FtZXJhUG9wb3Zlck9wdGlvbnMiLCJzYXZlVG9QaG90b0FsYnVtIiwidGFyZ2V0V2lkdGgiLCJ0YXJnZXRIZWlnaHQiLCJnZXRQaWN0dXJlIiwiaW1hZ2VEYXRhIiwib25JbWFnZVN1Y2Nlc3MiLCJmaWxlVVJJIiwiRmlsZVBhdGgiLCJyZXNvbHZlTmF0aXZlUGF0aCIsInJlc3VsdCIsInN0YXJ0c1dpdGgiLCJwcm9maWxlIiwicGljdHVyZV91cmwiLCJjb21tZW50IiwiZmlsZSIsIm5ld3VzZXIiLCJpbWdVUkkiLCJlcnJvciIsImFsZXJ0IiwidXJsRm9ySW1hZ2UiLCJpbWFnZVVSTCIsIm5hbWUiLCJzdWJzdHIiLCJsYXN0SW5kZXhPZiIsImRhdGFEaXJlY3RvcnkiLCJzY3JvbGxNZSIsImFuY2hvcl9pZCIsImhhc2giLCJoYW5kbGUiLCIkZ2V0QnlIYW5kbGUiLCJhbmNob3JTY3JvbGwiLCJzZXRfYWN0aXZlX29wdGlvbiIsImJ1dHRvbmlkIiwiY2xhc3NOYW1lIiwiaGlkZV9zcGVjaWFsX2RpdnMiLCJjbG9zZV9yZXBvcnRfZGV0YWlsX21vZGFsIiwicmVwb3J0X2RldGFpbF9pZCIsImxvY2F0ZSIsImNvb3JkcyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwibm93IiwibWVzc2FnZSIsImZvY3VzIiwiZHJhZ2dhYmxlIiwiYWRkTWFwQ29udHJvbHMiLCJjaGFuZ2VVc2VyTG9jYXRpb25QaW4iLCJsb24iLCJ1aWQiLCJvbmxpbmVfdXNlcl9nZW9fYXJyYXkiLCJsYXllciIsIm5ld0xhdExuZyIsIkwiLCJMYXRMbmciLCJzZXRMYXRMbmciLCJnZXRBbGxQb2x5Z29ucyIsInJlc3BvbnNlIiwibGFzdFBpbnNSZXNwb25zZSIsImZvckVhY2giLCJrZXkiLCJyZW1vdmVMYXllciIsImRhdGEiLCJyZWNvcmRzIiwiZmVhdHVyZSIsImdldFR5cGVPZk1hcE9iamVjdCIsIndrdF9nZW9tIiwibGF0bG5ncyIsImdldE9ubHlDb29yZGluYXRlc1BvbHlnb24iLCJwb2x5Z29uIiwiY29sb3IiLCJiaW5kUG9wdXAiLCJOT01fQVNUIiwiQ09EX0FTVCIsImFkZFRvIiwicmVwbGFjZSIsInBvaW50c0FycmF5Iiwic3BsaXQiLCJwb2x5Z29uUG9pbnRzQ29vcmRpbmF0ZXMiLCJwb2ludCIsInRyaW0iLCJjb29yZGluYXRlc0FycmF5IiwibmV3Q29vcmRpbmF0ZXMiLCJjb252ZXJ0TGF0TG9uZ1Byb2oiLCJsYXRsb24iLCJwdXNoIiwidGltZUNvbnZlcnRlciIsIlVOSVhfdGltZXN0YW1wIiwiYSIsIkRhdGUiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJtb250aCIsImdldE1vbnRoIiwiZGF5IiwiZ2V0RGF0ZSIsImhvdXIiLCJnZXRIb3VycyIsIm1pbiIsImdldE1pbnV0ZXMiLCJ0aW1lIiwiZ2V0U2Vjb25kcyIsIm1vZGVsIiwiZXh0ZXJuYWxNb2RlbCIsInNlbGVjdGVkSXRlbXMiLCJwcmVzZWxlY3RlZFNlYXJjaEl0ZW1zIiwiY2xpY2tlZFZhbHVlTW9kZWwiLCJyZW1vdmVkVmFsdWVNb2RlbCIsIml0ZW1zUmVtb3ZlZCIsImNhbGxiYWNrIiwidXNlcl9vcHRpb25zIiwibWVudSIsInNob3dfYW5vbnltb3VzX21lbnUiLCJzaG93X3VzZXJfbWVudSIsImh0bWwiLCJpbm5lckhUTUwiLCJoZWlnaHQiLCJ3aWR0aCIsImNyZWF0ZV9maWVsZF9hcnJheSIsInR5cGUiLCJ2YWx1ZSIsImZpZWxkIiwiY3JlYXRlX2ZpZWxkX2FycmF5X3dpdGhfdHdvRmllbGRzIiwic2Vjb25kVmFsdWUiLCJmaXhfZmJfaW1hZ2VfbGluayIsImluZGV4T2YiLCJwYXJ0cyIsIm5ld1VybCIsImxvZ19pbiIsInVzZXIiLCJwYXNzd29yZCIsInRha2VJZkF2YWlsYWJsZSIsImZpZWxkcyIsImNoZWNrX2ZpZWxkcyIsInJlc3AiLCJodHRwX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWwiLCJwaG90byIsImdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UiLCJQaG90byIsInNhdmVfdXNlcl9kYXRhIiwiTmFtZSIsIm5vbmF1dGgiLCJTaG93TG9jYXRpb24iLCJVaWQiLCJFc3RhZG8iLCJHZW5kZXIiLCJJbnRlcmVzdGVkSW4iLCJzYXZlVXNlciIsInNldF91c2VyX3BpY3R1cmUiLCJtYWtlQXZhaWxhYmxlQWdhaW4iLCJjbG9zZV9sb2dpbl9tb2RhbCIsInNob3dfZXJyb3JfbWVzc2FnZSIsInN0YXR1c1RleHQiLCJzaG93X2FsZXJ0IiwibG9nX2luX2JhY2tncm91bmQiLCJodHRwX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWxfYWpheCIsInNpZ25fb3V0IiwiZXJhc2VfdXNlcl9kYXRhIiwiZXJhc2VVc2VyIiwic2hvd19lZGl0X3Byb2ZpbGVfbW9kYWwiLCJlbWFpbCIsImdlbmRlciIsInVzZXJuYW1lIiwiaW50ZXJlc3RlZCIsInN0YXR1cyIsInNob3dfbG9jYXRpb24iLCJhY3R1YWxfcGhvdG8iLCJpc01vYmlsZURldmljZSIsImZyb21UZW1wbGF0ZVVybCIsInNjb3BlIiwiaGFyZHdhcmVCYWNrQnV0dG9uQ2xvc2UiLCJhbmltYXRpb24iLCJtb2RhbCIsImFjdGl2ZU1vZGFsIiwic2hvdyIsInJlYWRVUkwiLCJpbnB1dCIsImZpbGVzIiwicmVwb3J0IiwicmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsImUiLCJzcmMiLCJ0YXJnZXQiLCJyZWFkQXNEYXRhVVJMIiwiY2xvc2VfZWRpdF9wcm9maWxlX21vZGFsIiwiZWRpdF9wcm9maWxlX29rIiwiZWRpdF9wcm9maWxlIiwiZWRpdF9yZXF1ZXN0IiwiZWRpdF91c2VyIiwiSlNPTiIsInBhcnNlIiwiaHR0cF9kYXRhX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWwiLCJjb2RlIiwiaHR0cF9zdGF0dXMiLCJib2R5IiwiZXhjZXB0aW9uIiwicHJvZ3Jlc3MiLCJ1cGxvYWRQcm9ncmVzcyIsImxvYWRlZCIsInRvdGFsIiwiTWF0aCIsInJvdW5kIiwic3VjY2VzcyIsImhlYWRlcnMiLCJzaG93X2xvZ2luX21vZGFsIiwibG9naW5fb2siLCJzaG93X3NpZ25fdXBfbW9kYWwiLCJmdWxsbmFtZSIsImlkX2RvYyIsInRlbGVwaG9uZSIsImNsb3NlX3NpZ25fdXBfbW9kYWwiLCJzaWduX3VwIiwiY3JlYXRlX3VzZXIiLCJpZGVudGl0eV9kb2N1bWVudCIsInBob25lIiwiYWxlcnRQb3B1cCIsInRpdGxlIiwidGVtcGxhdGUiLCJyZXMiLCJzaWduX3VwX29rIiwiZ2V0VXNlciIsImRvYyIsImhhc1Bob3RvIiwiZmluZF9tZSIsInNhdmVfbmV3X3JlcG9ydF9wb3NpdGlvbiIsImdldE1lc3NhZ2VTY29wZSIsIm9wZW5Db3VuY2lsU2VsZWN0b3IiLCJmYWN0b3J5IiwiJGh0dHAiLCIkY29yZG92YUZpbGVUcmFuc2ZlciIsInBvc3QiLCJ3aXRoQ3JlZGVudGlhbHMiLCJDb250ZW50LVR5cGUiLCJnZXQiLCJwYXJhbXMiLCJwYXNzd29yZF9zaWduX2luIiwidXNlck9iaiIsImZpbGVLZXkiLCJ0cnVzdEFsbEhvc3RzIiwidXBsb2FkIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsInVuZGVmaW5lZCIsInRyYW5zZm9ybVJlcXVlc3QiLCJpZGVudGl0eSIsInBhc3N3b3JkX3JlY292ZXJ5IiwibG9naW5fZW1haWwiLCJwYXNzd29yZF9jaGFuZ2UiLCJvbGRQYXNzd29yZCIsIm5ld1Bhc3N3b3JkIiwiY29uZmlybVBhc3N3b3JkIiwiY2thbkFsbFBvbHlnb25zVVJMIiwiQXV0aG9yaXphdGlvbiIsIkNvbmZpZ09iaiIsIiRjb3Jkb3ZhTmV0d29yayIsImlzT2ZmbGluZSIsIiRxIiwidXNlcl9uYW1lIiwidXNlcl9wYXNzd29yZCIsInVzZXJfcGljdHVyZV91cmwiLCJfaWQiLCJfcmV2IiwiX2RiIiwicHV0IiwiUG91Y2hEQiIsInNhdmVSZXBvcnQiLCJkYXRlIiwibmV3X3JlcG9ydF9pZCIsImdldE1pbGxpc2Vjb25kcyIsInVwZGF0ZVJlcG9ydCIsImdldENhdGVnb3JpZXMiLCJzYXZlQ2F0ZWdvcmllcyIsImNhdGVnb3JpZXMiLCJnZXRSZXBvcnQiLCJyZXBvcnRJZCIsImdldEFsbFJlcG9ydHMiLCJhbGxEb2NzIiwiaW5jbHVkZV9kb2NzIiwiYXR0YWNobWVudHMiLCJzdGFydGtleSIsImVuZGtleSIsImRlbGV0ZVJlcG9ydCIsInJlcG9ydF9pZCIsImRlbGV0ZUdpdmVuUmVwb3J0IiwianNvblJlc3VsdCIsImVycm9yQ29udGFpbmVySWQiLCJlcnJvckRpdiIsIlN0YXR1cyIsIk1lc3NhZ2UiLCJodHRwX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWxfcG9wdXAiLCJodHRwX2RhdGFfcmVzcG9uc2VfaXNfc3VjY2Vzc2Z1bF9hamF4Iiwic2hvd19lcnJvcl9tZXNzYWdlX3BvcHVwIiwiZXJyb3JzIiwidmFsaWRhdGVfbm90X2VtcHR5IiwidmFsaWRhdGVfZW1haWwiLCJ2YWxpZGF0ZV9pZGRvY191eSIsInZhbGlkYXRlX3R3b193b3JkcyIsInZhbGlkYXRlX2VxdWFsc1RvIiwiJGlvbmljTG9hZGluZyIsIkxPQURFUkFQSSIsInNob3dMb2FkaW5nIiwidGV4dCIsImhpZGVMb2FkaW5nIiwidG9nZ2xlTG9hZGluZ1dpdGhNZXNzYWdlIiwic2VsZiIsInRoaXMiLCJjb25maXJtUG9wdXAiLCJjb25maXJtIiwic2hvd0FsZXJ0IiwiX3RpdGxlIiwiX3RlbXBsYXRlIiwibG9jYXRpb25zT2JqIiwibGFzdF91c2VyX2xhdCIsImxhc3RfdXNlcl9sbmciLCJzZWxlY3RlZF9jb3VuY2lsIiwic2VsZWN0Q291bmNpbCIsImNvdW5jaWxOYW1lIiwic2F2ZV9sYXN0X3VzZXJfcG9zaXRpb24iLCJzYXZlZExvY2F0aW9ucyIsInByb2o0IiwiZGVmcyIsIm1hcFNlcnZpY2UiLCJnb1RvUGxhY2UiLCJfZ2VvSnNvbiIsImNycyIsInByb3BlcnRpZXMiLCJmZWF0dXJlcyIsImdlb21ldHJ5IiwiY29vcmRpbmF0ZXMiLCJub21icmUiLCJfbGF0bG5nIiwiUHJvaiIsImdlb0pzb24iLCJwb2ludFRvTGF5ZXIiLCJsYXRsbmciLCJodG1sUG9wVXAiLCJjb21waWxlZCIsIm1hcmtlciIsInNldFZpZXciLCJvcGVuUG9wdXAiLCJtb2RhbE9CSiIsIlBpbiIsIl9kYXRhIiwiZXh0ZW5kIiwicGluc1VSTCIsImFwaVVSTCIsImdldEFsbCIsImhhc2hfaWQiLCJyYW5kb20iLCJzZW5kVXNlckxvY2F0aW9uIiwiX2FsbCIsImN1cnJlbnQiLCJidWlsZCIsInByb3RvdHlwZSIsImFsZXJ0X3RpdGxlIiwiYWxlcnRfbWVzc2FnZSIsImFza0Zvck9uZVZhbHVlUG9wVXAiLCJmaWVsZF9uYW1lIiwidmFsaWRhdGlvblR5cGUiLCJteVBvcHVwIiwic3ViVGl0bGUiLCJidXR0b25zIiwib25UYXAiLCJwcmV2ZW50RGVmYXVsdCIsInNlbWFwaG9yZU9iaiIsInNlbWFwaG9yZXMiLCJzZW1hcGhvcmVJZCIsIkFwaUltRW5kcG9pbnQiLCJBcGlEYXRhRW5kcG9pbnQiLCJyZXN0UHJlZmZpeCIsImxvY2F0aW9uQVBJIiwic2VhcmNoTG9jYXRpb25CeVN0ciIsIl9sb2NhdGlvbiIsIm1ldGhvZCIsInNlYXJjaEVzcXVpbmFCeVN0ciIsImNhbGxlIiwiZXNxdWluYSIsImdldExvY2F0aW9uR2VvbSIsImdldFBhcmFtUGF0aEJ5VGlwbyIsInRpcG8iLCJpIiwicGF0aFBhcmFtcyIsImxlbmd0aCIsImdldExvY2F0aW9uR2VvbVBNQiIsImVzcXVpbmFfbnVtZXJvIiwiX3RpcG8iLCJyZXN0R2VvRGF0YVNlcnZpY2VQYXRoIiwiRVNRVUlOQSIsIkRJUkVDQ0lPTiIsIlVzZXJPYmoiLCJnZXRfdXNlcl9kYXRhIiwiYWRkX3Bob3RvIiwiaXNMb2dnZWQiLCJ2YWx1ZXMiLCJmaWx0ZXIiLCJ2IiwicmUiLCJ0ZXN0IiwiZGlnIiwicGFyc2VJbnQiXSwibWFwcGluZ3MiOiJBQU9BLEdBQUlBLFNBQ0ZDLFlBQWFDLFFBQVFDLE9BQU8seUJBQzVCQyxTQUFVRixRQUFRQyxPQUFPLHNCQUczQkgsUUFB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QVUsTUFBUEEsR0FBc0IsYUFBUEEsR0FBNkIsSUFBUEEsRUFBVSxDQUNoRCxHQUFJb1IsR0FBU3BSLEVBQU0zQyxNQUFNLEtBQUtnVSxPQUFPLFNBQVNDLEdBQUcsTUFBVyxLQUFKQSxHQUN4RCxPQUFJRixHQUFPWCxPQUFTLEVBUXBCLE9BQU8sR0FJYnJGLGtCQUFtQixTQUFVcEwsRUFBTUcsR0FDakMsTUFBR0gsSUFBT0csR0FPWjhLLGVBQWdCLFNBQVVqTCxHQUN0QixHQUFVLE1BQVBBLEdBQXNCLGFBQVBBLEdBQTZCLElBQVBBLEVBQVUsQ0FDaEQsR0FBSXVSLEdBQUssd0pBQ1QsT0FBT0EsR0FBR0MsS0FBS3hSLEdBRWYsT0FBTyxHQUlia0wsa0JBQW1CLFNBQVVsTCxHQUMzQixHQUFVLE1BQVBBLEdBQXNCLGFBQVBBLEdBQTZCLElBQVBBLEVBQVUsQ0FDOUNBLEVBQVFBLEVBQU03QyxRQUFRLE1BQU8sR0FDN0IsSUFBSXNVLEdBQU16UixFQUFNQSxFQUFNeVEsT0FBUyxHQUMzQnpTLEVBQUksRUFBT3VTLEVBQUksQ0FDbkIsSUFBR3ZRLEVBQU15USxRQUFVLEVBQ2pCLElBQUlGLEVBQUl2USxFQUFNeVEsT0FBUUYsRUFBSSxFQUFHQSxJQUMzQnZRLEVBQVEsSUFBTUEsQ0FHbEIsS0FBSXVRLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUNoQnZTLEdBQU0wVCxTQUFTLFVBQVVuQixJQUFNbUIsU0FBUzFSLEVBQU11USxJQUFPLEVBRXZELElBQUlyWCxFQU1KLE9BSkVBLEdBREM4RSxFQUFFLEtBQU8sRUFDRCxFQUVBLEdBQUtBLEVBQUksR0FFakJ5VCxHQUFPdlksRUFNWixPQUFPIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIElvbmljIFN0YXJ0ZXIgQXBwXG5cbi8vIGFuZ3VsYXIubW9kdWxlIGlzIGEgZ2xvYmFsIHBsYWNlIGZvciBjcmVhdGluZywgcmVnaXN0ZXJpbmcgYW5kIHJldHJpZXZpbmcgQW5ndWxhciBtb2R1bGVzXG4vLyAncG1iX2ltJyBpcyB0aGUgbmFtZSBvZiB0aGlzIGFuZ3VsYXIgbW9kdWxlIGV4YW1wbGUgKGFsc28gc2V0IGluIGEgPGJvZHk+IGF0dHJpYnV0ZSBpbiBpbmRleC5odG1sKVxuLy8gdGhlIDJuZCBwYXJhbWV0ZXIgaXMgYW4gYXJyYXkgb2YgJ3JlcXVpcmVzJ1xuLy8gJ3N0YXJ0ZXIuc2VydmljZXMnIGlzIGZvdW5kIGluIHNlcnZpY2VzLmpzXG4vLyAnc3RhcnRlci5jb250cm9sbGVycycgaXMgZm91bmQgaW4gY29udHJvbGxlcnMuanNcbnZhciBwbWJfaW0gPSB7XG4gIGNvbnRyb2xsZXJzOiBhbmd1bGFyLm1vZHVsZSgncG1iX2ltLmNvbnRyb2xsZXJzJywgW10pLFxuICBzZXJ2aWNlczogYW5ndWxhci5tb2R1bGUoJ3BtYl9pbS5zZXJ2aWNlcycsIFtdKVxufTtcblxucG1iX2ltLmFwcCA9IGFuZ3VsYXIubW9kdWxlKCdwbWJfaW0nLCBbJ2lvbmljJywnaW9uaWMud2l6YXJkJywnaW9uLWF1dG9jb21wbGV0ZScsJ2xlYWZsZXQtZGlyZWN0aXZlJywgJ3BtYl9pbS5jb250cm9sbGVycycsICdwbWJfaW0uc2VydmljZXMnLCAnbmdDb3Jkb3ZhJ10pXG5cbi5jb25zdGFudCgnQXBpSW1FbmRwb2ludCcsIHtcbiAgdXJsOiAnaHR0cDovL3d3dy5tb250ZXZpZGVvLmd1Yi51eSdcbn0pXG5cbi5jb25zdGFudCgnQXBpRGF0YUVuZHBvaW50Jywge1xuICB1cmw6ICdodHRwOi8vYmFja2VuZC5lZHVjYWNpb24udGhvci5kYXRhdXkub3JnJ1xufSlcblxuXG4ucnVuKGZ1bmN0aW9uKCRpb25pY1BsYXRmb3JtLCAkcm9vdFNjb3BlLCAkY29yZG92YUtleWJvYXJkKSB7XG4gICRyb290U2NvcGUuVkVSU0lPTiA9IHdpbmRvdy5WRVJTSU9OO1xuICAkaW9uaWNQbGF0Zm9ybS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAvLyBIaWRlIHRoZSBhY2Nlc3NvcnkgYmFyIGJ5IGRlZmF1bHQgKHJlbW92ZSB0aGlzIHRvIHNob3cgdGhlIGFjY2Vzc29yeSBiYXIgYWJvdmUgdGhlIGtleWJvYXJkXG4gICAgLy8gZm9yIGZvcm0gaW5wdXRzKVxuICAgIGlmICh3aW5kb3cuY29yZG92YSAmJiB3aW5kb3cuY29yZG92YS5wbHVnaW5zLktleWJvYXJkKSB7XG4gICAgICBjb3Jkb3ZhLnBsdWdpbnMuS2V5Ym9hcmQuaGlkZUtleWJvYXJkQWNjZXNzb3J5QmFyKGZhbHNlKTtcbiAgICAgIGNvcmRvdmEucGx1Z2lucy5LZXlib2FyZC5kaXNhYmxlU2Nyb2xsKGZhbHNlKTtcbiAgICB9XG4gICAgLy8kY29yZG92YUtleWJvYXJkLmhpZGVBY2Nlc3NvcnlCYXIoZmFsc2UpXG4gICAgLy8kY29yZG92YUtleWJvYXJkLmRpc2FibGVTY3JvbGwoZmFsc2UpXG4gICAgaW9uaWMuUGxhdGZvcm0uaXNGdWxsU2NyZWVuID0gdHJ1ZTtcbiAgICBpZiAod2luZG93LlN0YXR1c0Jhcikge1xuICAgICAgLy8gb3JnLmFwYWNoZS5jb3Jkb3ZhLnN0YXR1c2JhciByZXF1aXJlZFxuICAgICAgU3RhdHVzQmFyLnN0eWxlRGVmYXVsdCgpO1xuICAgIH1cbiAgfSk7XG59KVxuXG4uY29uZmlnKGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRjb21waWxlUHJvdmlkZXIsICRpb25pY0NvbmZpZ1Byb3ZpZGVyKSB7XG4gICRjb21waWxlUHJvdmlkZXIuZGVidWdJbmZvRW5hYmxlZChmYWxzZSk7XG4gIC8vJGlvbmljQ29uZmlnUHJvdmlkZXIuc2Nyb2xsaW5nLmpzU2Nyb2xsaW5nKHRydWUpO1xuXG4gIC8vIElvbmljIHVzZXMgQW5ndWxhclVJIFJvdXRlciB3aGljaCB1c2VzIHRoZSBjb25jZXB0IG9mIHN0YXRlc1xuICAvLyBMZWFybiBtb3JlIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyLXVpL3VpLXJvdXRlclxuICAvLyBTZXQgdXAgdGhlIHZhcmlvdXMgc3RhdGVzIHdoaWNoIHRoZSBhcHAgY2FuIGJlIGluLlxuICAvLyBFYWNoIHN0YXRlJ3MgY29udHJvbGxlciBjYW4gYmUgZm91bmQgaW4gY29udHJvbGxlcnMuanNcbiAgJHN0YXRlUHJvdmlkZXJcblxuLnN0YXRlKCdhcHAnLCB7XG4gICAgY2FjaGU6IGZhbHNlLFxuICAgIHVybDogXCIvYXBwXCIsXG4gICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgdGVtcGxhdGVVcmw6IFwidGVtcGxhdGVzL21lbnUuaHRtbFwiLFxuICAgIGNvbnRyb2xsZXI6ICdBYnNDb250cm9sbGVyJ1xuICB9KVxuXG4uc3RhdGUoJ2FwcC5tYXAnLCB7XG4gICAgY2FjaGU6IGZhbHNlLFxuICAgIHVybDogXCIvbWFwXCIsXG4gICAgdmlld3M6IHtcbiAgICAgICdtZW51Q29udGVudCcgOntcbiAgICAgICAgdGVtcGxhdGVVcmw6IFwidGVtcGxhdGVzL21hcC5odG1sXCIsXG4gICAgICAgIGNvbnRyb2xsZXIgOiBcIk1hcENvbnRyb2xsZXJcIlxuICAgICAgfVxuICAgIH1cbiAgfSlcblxuLnN0YXRlKCdhcHAuZm9ybScsIHtcbiAgY2FjaGU6IGZhbHNlLFxuICB1cmw6IFwiL2Zvcm1cIixcbiAgdmlld3M6IHtcbiAgICAnbWVudUNvbnRlbnQnIDp7XG4gICAgICB0ZW1wbGF0ZVVybDogXCJ0ZW1wbGF0ZXMvZm9ybS5odG1sXCIsXG4gICAgICBjb250cm9sbGVyIDogXCJGb3JtQ3RybFwiXG4gICAgfVxuICB9XG59KVxuXG4uc3RhdGUoJ2FwcC5pbnRybycsIHtcbiAgY2FjaGU6IGZhbHNlLFxuICB1cmw6IFwiL2ludHJvXCIsXG4gIHZpZXdzOiB7XG4gICAgJ21lbnVDb250ZW50JyA6e1xuICAgICAgdGVtcGxhdGVVcmw6IFwidGVtcGxhdGVzL2ludHJvLmh0bWxcIixcbiAgICAgIGNvbnRyb2xsZXIgOiBcIkludHJvQ3RybFwiXG4gICAgfVxuICB9XG59KVxuXG4vLyBpZiBub25lIG9mIHRoZSBhYm92ZSBzdGF0ZXMgYXJlIG1hdGNoZWQsIHVzZSB0aGlzIGFzIHRoZSBmYWxsYmFja1xuJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL2FwcC9tYXAnKTtcblxufSk7XG4iLCJwbWJfaW0uY29udHJvbGxlcnMuY29udHJvbGxlcignQWJzQ29udHJvbGxlcicsXG5bJyRzY29wZScsXG5mdW5jdGlvbigkc2NvcGUpIHtcblxufV0pO1xuIiwicG1iX2ltLmNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ0Zvcm1DdHJsJywgWyckc2NvcGUnLCAnJHN0YXRlJyxcbiAgJyRjb3Jkb3ZhR2VvbG9jYXRpb24nLFxuICAnJHN0YXRlUGFyYW1zJyxcbiAgJyRpb25pY1BsYXRmb3JtJyxcbiAgJyRpb25pY1BvcHVwJyxcbiAgJ0xvY2F0aW9uc1NlcnZpY2UnLFxuICAnREJTZXJ2aWNlJyxcbiAgJyRpb25pY1NsaWRlQm94RGVsZWdhdGUnLFxuICAnJGlvbmljU2Nyb2xsRGVsZWdhdGUnLFxuICBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgJGNvcmRvdmFHZW9sb2NhdGlvbiwgJHN0YXRlUGFyYW1zLCAkaW9uaWNQbGF0Zm9ybSwgJGlvbmljUG9wdXAsIExvY2F0aW9uc1NlcnZpY2UsIERCU2VydmljZSwgJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZSxcbiAgJGlvbmljU2Nyb2xsRGVsZWdhdGUpIHtcblxuICAgICRzY29wZS5mb3JtID0ge307XG4gICAgJHNjb3BlLmZvcm0uZWRhZCA9IDE2O1xuICAgICRzY29wZS5mb3JtLnBsYW4gPSBcIlwiO1xuICAgICRzY29wZS5mb3JtLmx1Z2FyID0gXCJcIjtcbiAgICAkc2NvcGUuZm9ybS50dXJubyA9IFwiXCI7XG4gICAgJHNjb3BlLmZvcm0ubml2ZWxfYXByb2JhZG8gPSBcIlwiO1xuICAgIFxuXG5cdCAgJHNjb3BlLm5leHQgPSBmdW5jdGlvbigpIHtcblx0ICAgICRpb25pY1NsaWRlQm94RGVsZWdhdGUubmV4dCgpO1xuXHQgIH07XG5cblx0ICAkc2NvcGUucHJldmlvdXMgPSBmdW5jdGlvbigpIHtcblx0ICAgICRpb25pY1NsaWRlQm94RGVsZWdhdGUucHJldmlvdXMoKTtcblx0ICB9O1xuXG5cdCAgJHNjb3BlLmdvX3RvX21hcCA9IGZ1bmN0aW9uKCl7XG5cdCAgICAkc3RhdGUuZ28oXCJhcHAubWFwXCIpO1xuXHQgIH1cblxuICB9XG5dKTtcbiIsInBtYl9pbS5jb250cm9sbGVycy5jb250cm9sbGVyKCdJbnRyb0N0cmwnLCBbJyRzY29wZScsICckc3RhdGUnLFxuICAnJGNvcmRvdmFHZW9sb2NhdGlvbicsXG4gICckc3RhdGVQYXJhbXMnLFxuICAnJGlvbmljUGxhdGZvcm0nLFxuICAnJGlvbmljUG9wdXAnLFxuICAnTG9jYXRpb25zU2VydmljZScsXG4gICdEQlNlcnZpY2UnLFxuICBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgJGNvcmRvdmFHZW9sb2NhdGlvbiwgJHN0YXRlUGFyYW1zLCAkaW9uaWNQbGF0Zm9ybSwgJGlvbmljUG9wdXAsIExvY2F0aW9uc1NlcnZpY2UsIERCU2VydmljZSkge1xuXG4gIHZhciBkYiA9IERCU2VydmljZS5pbml0REIoKTtcbiAgZGIuaW5mbygpLnRoZW4oY29uc29sZS5sb2cuYmluZChjb25zb2xlKSk7XG5cbiAgJHNjb3BlLmdlb2xvY2F0ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICB2YXIgcG9zT3B0aW9ucyA9IHt0aW1lb3V0OiAzNTAwLCBlbmFibGVIaWdoQWNjdXJhY3k6IHRydWV9O1xuICAgICAgJGNvcmRvdmFHZW9sb2NhdGlvblxuICAgICAgICAuZ2V0Q3VycmVudFBvc2l0aW9uKHBvc09wdGlvbnMpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgICAgTG9jYXRpb25zU2VydmljZS5zYXZlX2luaXRpYWxfcG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgICAgICRzdGF0ZS5nbyhcImFwcC5mb3JtXCIpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAkc3RhdGUuZ28oXCJhcHAuZm9ybVwiKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgJHNjb3BlLiRvbignJGlvbmljVmlldy5lbnRlcicsIGZ1bmN0aW9uKCl7IC8vVGhpcyBpcyBmaXJlZCB0d2ljZSBpbiBhIHJvd1xuICAgICAgaWYoTG9jYXRpb25zU2VydmljZS5jb3VuY2lsX21vZGFsIT1udWxsKXtcbiAgICAgICAgTG9jYXRpb25zU2VydmljZS5jb3VuY2lsX21vZGFsLmhpZGUoKTtcbiAgICAgICAgTG9jYXRpb25zU2VydmljZS5jb3VuY2lsX21vZGFsLnJlbW92ZSgpO1xuICAgICAgfVxuICAgICAgICRzY29wZS5nZW9sb2NhdGUoKTtcbiAgIH0pO1xuXG4gIH1cbl0pO1xuIiwicG1iX2ltLmNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ01hcENvbnRyb2xsZXInLCBbJyRzY29wZScsICdfJyxcbiAgJyRjb3Jkb3ZhQ2FtZXJhJyxcbiAgJyRjb3Jkb3ZhR2VvbG9jYXRpb24nLFxuICAnJGNvbXBpbGUnLFxuICAnJGlvbmljTW9kYWwnLFxuICAnJGlvbmljUG9wdXAnLFxuICAnbGVhZmxldERhdGEnLFxuICAnQ29uZmlnU2VydmljZScsXG4gICdMb2NhdGlvbnNTZXJ2aWNlJyxcbiAgJ0NrYW5TZXJ2aWNlJyxcbiAgJ1BpblNlcnZpY2UnLFxuICAnQXV0aFNlcnZpY2UnLFxuICAnVXNlclNlcnZpY2UnLFxuICAnREJTZXJ2aWNlJyxcbiAgJyR0aW1lb3V0JyxcbiAgJyRpbnRlcnZhbCcsXG4gICckbG9jYXRpb24nLFxuICAnRXJyb3JTZXJ2aWNlJyxcbiAgJyRpb25pY1NsaWRlQm94RGVsZWdhdGUnLFxuICAnJGlvbmljU2Nyb2xsRGVsZWdhdGUnLFxuICAnUG9wVXBTZXJ2aWNlJyxcbiAgJ0Nvbm5lY3Rpdml0eVNlcnZpY2UnLFxuICAnJGNvcmRvdmFJbkFwcEJyb3dzZXInLFxuICAnTWFwU2VydmljZScsXG4gICdNb2RhbFNlcnZpY2UnLFxuICAnU2VtYXBob3JlU2VydmljZScsXG4gICdWYWxpZGF0aW9uU2VydmljZScsXG4gIGZ1bmN0aW9uKFxuICAgICRzY29wZSxcbiAgICBfLFxuICAgICRjb3Jkb3ZhQ2FtZXJhLFxuICAgICRjb3Jkb3ZhR2VvbG9jYXRpb24sXG4gICAgJGNvbXBpbGUsXG4gICAgJGlvbmljTW9kYWwsXG4gICAgJGlvbmljUG9wdXAsXG4gICAgbGVhZmxldERhdGEsXG4gICAgQ29uZmlnU2VydmljZSxcbiAgICBMb2NhdGlvbnNTZXJ2aWNlLFxuICAgIENrYW5TZXJ2aWNlLFxuICAgIFBpblNlcnZpY2UsXG4gICAgQXV0aFNlcnZpY2UsXG4gICAgVXNlclNlcnZpY2UsXG4gICAgREJTZXJ2aWNlLFxuICAgICR0aW1lb3V0LFxuICAgICRpbnRlcnZhbCxcbiAgICAkbG9jYXRpb24sXG4gICAgRXJyb3JTZXJ2aWNlLFxuICAgICRpb25pY1NsaWRlQm94RGVsZWdhdGUsXG4gICAgJGlvbmljU2Nyb2xsRGVsZWdhdGUsXG4gICAgUG9wVXBTZXJ2aWNlLFxuICAgIENvbm5lY3Rpdml0eVNlcnZpY2UsXG4gICAgJGNvcmRvdmFJbkFwcEJyb3dzZXIsXG4gICAgTWFwU2VydmljZSxcbiAgICBNb2RhbFNlcnZpY2UsXG4gICAgU2VtYXBob3JlU2VydmljZSxcbiAgICBWYWxpZGF0aW9uU2VydmljZVxuICApIHtcblxuICAgIC8qKlxuICAgICAqIE9uY2Ugc3RhdGUgbG9hZGVkLCBnZXQgcHV0IG1hcCBvbiBzY29wZS5cbiAgICAgKi9cbiAgICAkc2NvcGUuYXNlbnRhbWllbnRvc19sYXllcnMgPSBuZXcgQXJyYXkoKTtcbiAgICAkc2NvcGUuYmFzZVVSTCA9IENvbmZpZ1NlcnZpY2UuYmFzZVVSTDtcbiAgICAkc2NvcGUuQXBwTmFtZSA9IENvbmZpZ1NlcnZpY2UuQXBwTmFtZTtcbiAgICAkc2NvcGUudXNlcl9jYWNoZWRfaW1hZ2UgPSBcIi4vaW1nL2ljb24tdXNlci1hbm9ueW1vdXMucG5nXCI7XG4gICAgJHNjb3BlLm9uZV92YWx1ZV9wb3B1cCA9IG51bGw7XG4gICAgJHNjb3BlLm15SW50ZXJ2YWxzID0gbmV3IEFycmF5KCk7XG5cbiAgICAkc2NvcGUuJG9uKFwiJGlvbmljVmlldy5iZWZvcmVFbnRlclwiLCBmdW5jdGlvbigpIHtcbiAgICAgIE1vZGFsU2VydmljZS5jaGVja05vTW9kYWxJc09wZW4oKTtcbiAgICAgIERCU2VydmljZS5pbml0REIoKTtcbiAgICAgIGlmKENvbm5lY3Rpdml0eVNlcnZpY2UuaXNPbmxpbmUoKSl7XG4gICAgICAgICRzY29wZS5jaGVja191c2VyX2xvZ2dlZCgpO1xuICAgICAgfWVsc2V7XG4gICAgICAgICRzY29wZS5zZXRfb2ZmbGluZV91c2VyKCk7XG4gICAgICB9XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvb3RfYmFyXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICBpZihDb25uZWN0aXZpdHlTZXJ2aWNlLmlzT25saW5lKCkpe1xuICAgICAgICAkc2NvcGUuY3JlYXRlX29ubGluZV9tYXAoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS4kb24oXCIkaW9uaWNWaWV3LmFmdGVyRW50ZXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbWFwID0gbGVhZmxldERhdGEuZ2V0TWFwKCk7XG4gICAgICBpZihMb2NhdGlvbnNTZXJ2aWNlLmluaXRpYWxfbGF0IT1cIlwiKXtcbiAgICAgICAgTWFwU2VydmljZS5jZW50ZXJNYXBPbkNvb3JkcyhMb2NhdGlvbnNTZXJ2aWNlLmluaXRpYWxfbGF0LCBMb2NhdGlvbnNTZXJ2aWNlLmluaXRpYWxfbG5nLCAxMCk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgTWFwU2VydmljZS5jZW50ZXJNYXBPbkNvb3JkcygtMzQuOTAxMTEzLCAtNTYuMTY0NTMxLCAxMCk7XG4gICAgICB9XG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgfSk7XG5cblxuICAgICRzY29wZS5vcGVuV2Vic2l0ZSA9IGZ1bmN0aW9uKHVybCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgbG9jYXRpb246ICdubycsXG4gICAgICAgICAgICAgICAgY2xlYXJjYWNoZTogJ3llcycsXG4gICAgICAgICAgICAgICAgdG9vbGJhcjogJ25vJ1xuICAgICAgICAgICAgfTtcblxuICAgICAkY29yZG92YUluQXBwQnJvd3Nlci5vcGVuKHVybCwgJ19ibGFuaycsIG9wdGlvbnMpXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgLy8gZXJyb3JcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmNyZWF0ZV9vbmxpbmVfbWFwID0gZnVuY3Rpb24oKXtcbiAgICAgICRzY29wZS5tYXAgPSB7XG4gICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgdGlsZUxheWVyOiAnaHR0cHM6Ly97c30udGlsZS5vcGVuc3RyZWV0bWFwLm9yZy97en0ve3h9L3t5fS5wbmcnLFxuICAgICAgICAgIG1pblpvb206IDEsXG4gICAgICAgICAgbWF4Wm9vbTogMTgsXG4gICAgICAgICAgem9vbUNvbnRyb2xQb3NpdGlvbjogJ3RvcGxlZnQnLFxuICAgICAgICB9LFxuICAgICAgICBtYXJrZXJzOiB7fSxcbiAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgbWFwOiB7XG4gICAgICAgICAgICBlbmFibGU6IFsnY29udGV4dCddLFxuICAgICAgICAgICAgbG9naWM6ICdlbWl0J1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2VudGVyOiB7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICAkc2NvcGUubG9hZFBpbnNMYXllcigpO1xuICAgICAgJHNjb3BlLm1hcC5jZW50ZXIgPSB7XG4gICAgICAgICAgbGF0OiAtMzQuOTAxMTEzLFxuICAgICAgICAgIGxuZzogLTU2LjE2NDUzMSxcbiAgICAgICAgICB6b29tOiAxMFxuICAgICAgICB9O1xuICAgICAgbGVhZmxldERhdGEuZ2V0TWFwKCkudGhlbihmdW5jdGlvbihtYXApIHtcbiAgICAgICAgbWFwLm9uKCdtb3ZlZW5kJywgJHNjb3BlLmhpZGVPZmZTY3JlZW5QaW5zKTtcbiAgICAgIH0pO1xuICAgIH07XG5cblxuXG4gICRzY29wZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZS5uZXh0KCk7XG4gIH07XG5cbiAgJHNjb3BlLnByZXZpb3VzID0gZnVuY3Rpb24oKSB7XG4gICAgJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZS5wcmV2aW91cygpO1xuICB9O1xuXG4gICRzY29wZS5iYWNrX3RvX21hcCA9IGZ1bmN0aW9uKGJhY2tfdG9fbWFwKXtcbiAgICBpZihiYWNrX3RvX21hcCl7XG4gICAgICAvL0xvY2F0aW9uc1NlcnZpY2UuaW5pdGlhbF9sYXQgPSAkc2NvcGUucmVwb3J0LmxhdDtcbiAgICAgIC8vTG9jYXRpb25zU2VydmljZS5pbml0aWFsX2xuZyA9ICRzY29wZS5yZXBvcnQubG9uO1xuICAgICAgTW9kYWxTZXJ2aWNlLmNoZWNrTm9Nb2RhbElzT3BlbigpO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb290X2JhclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyLWluc2lkZS1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAvLyRzY29wZS5hZGRSZXBvcnRzTGF5ZXIoKTtcbiAgICB9ZWxzZXtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lci1pbnNpZGUtbW9kYWxcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIH1cbiAgfVxuXG5cbiAgJHNjb3BlLmltYWdlID0gbnVsbDtcblxuICAkc2NvcGUuYWRkSW1hZ2UgPSBmdW5jdGlvbihpc0Zyb21BbGJ1bSwgaXNVc2VyUGhvdG8sIGlzQ29tbWVudFBob3RvLCBpc05ld1VzZXJQaG90bykge1xuICAgIC8vYWxlcnQoXCJhZGRJbWFnZVwiKTtcbiAgICAkc2NvcGUuaXNVc2VyUGhvdG8gPSBpc1VzZXJQaG90bztcbiAgICAkc2NvcGUuaXNDb21tZW50UGhvdG8gPSBpc0NvbW1lbnRQaG90bztcbiAgICAkc2NvcGUuaXNOZXdVc2VyUGhvdG8gPSBpc05ld1VzZXJQaG90bztcblxuICAgIHZhciBzb3VyY2UgPSBDYW1lcmEuUGljdHVyZVNvdXJjZVR5cGUuQ0FNRVJBO1xuICAgIHZhciBmaXhfb3JpZW50YXRpb24gPSB0cnVlO1xuICAgIHZhciBzYXZlX3RvX2dhbGxlcnkgPSB0cnVlO1xuICAgIGlmKGlzRnJvbUFsYnVtPT0xKXtcbiAgICAgIHNvdXJjZSA9IENhbWVyYS5QaWN0dXJlU291cmNlVHlwZS5QSE9UT0xJQlJBUlk7XG4gICAgICBmaXhfb3JpZW50YXRpb24gPSBmYWxzZTtcbiAgICAgIHNhdmVfdG9fZ2FsbGVyeSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgcXVhbGl0eTogOTAsXG4gICAgICBkZXN0aW5hdGlvblR5cGU6IENhbWVyYS5EZXN0aW5hdGlvblR5cGUuRklMRV9VUkksXG4gICAgICBzb3VyY2VUeXBlOiBzb3VyY2UsXG4gICAgICBhbGxvd0VkaXQ6IGZhbHNlLFxuICAgICAgY29ycmVjdE9yaWVudGF0aW9uIDogZml4X29yaWVudGF0aW9uLFxuICAgICAgZW5jb2RpbmdUeXBlOiBDYW1lcmEuRW5jb2RpbmdUeXBlLkpQRUcsXG4gICAgICBwb3BvdmVyT3B0aW9uczogQ2FtZXJhUG9wb3Zlck9wdGlvbnMsXG4gICAgICBzYXZlVG9QaG90b0FsYnVtOiBzYXZlX3RvX2dhbGxlcnksXG4gICAgICB0YXJnZXRXaWR0aDogNTAwLFxuICAgICAgdGFyZ2V0SGVpZ2h0OiA1MDBcbiAgICB9O1xuXG5cbiAgICAkY29yZG92YUNhbWVyYS5nZXRQaWN0dXJlKG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24oaW1hZ2VEYXRhKSB7XG4gICAgICBvbkltYWdlU3VjY2VzcyhpbWFnZURhdGEpO1xuXG4gICAgICBmdW5jdGlvbiBvbkltYWdlU3VjY2VzcyhmaWxlVVJJKSB7XG4gICAgICAgIHdpbmRvdy5GaWxlUGF0aC5yZXNvbHZlTmF0aXZlUGF0aChmaWxlVVJJLCBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAvLyBvblN1Y2Nlc3MgY29kZVxuICAgICAgICAgIC8vYWxlcnQocmVzdWx0KTtcbiAgICAgICAgICBmaWxlVVJJID0gJ2ZpbGU6Ly8nICsgcmVzdWx0O1xuICAgICAgICAgIGlmKHJlc3VsdC5zdGFydHNXaXRoKFwiZmlsZTovL1wiKSl7XG4gICAgICAgICAgICBmaWxlVVJJID0gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZigkc2NvcGUuaXNVc2VyUGhvdG89PTEpe1xuICAgICAgICAgICAgLy9Vc2VyU2VydmljZS5hZGRfcGhvdG8oZmlsZVVSSSk7XG4gICAgICAgICAgICAkc2NvcGUucHJvZmlsZS5waWN0dXJlX3VybCA9IGZpbGVVUkk7XG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBpZigkc2NvcGUuaXNDb21tZW50UGhvdG89PTEpe1xuICAgICAgICAgICAgICAkc2NvcGUuY29tbWVudC5maWxlID0gZmlsZVVSSTtcbiAgICAgICAgICAgIH1lbHNlIGlmKCRzY29wZS5pc05ld1VzZXJQaG90bz09MSl7XG4gICAgICAgICAgICAgICRzY29wZS5uZXd1c2VyLnBpY3R1cmVfdXJsID0gZmlsZVVSSTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgJHNjb3BlLmltZ1VSSSA9IGZpbGVVUkk7XG4gICAgICAgICAgLy9jcmVhdGVGaWxlRW50cnkoZmlsZVVSSSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgYWxlcnQoXCJFcnJvciByZXNvbHZlTmF0aXZlUGF0aFwiICsgZXJyb3IpO1xuICAgICAgICB9KTtcblxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjcmVhdGVGaWxlRW50cnkoZmlsZVVSSSkge1xuICAgICAgICB3aW5kb3cucmVzb2x2ZUxvY2FsRmlsZVN5c3RlbVVSTChmaWxlVVJJLCBjb3B5RmlsZSwgZmFpbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIDVcbiAgICAgIGZ1bmN0aW9uIGNvcHlGaWxlKGZpbGVFbnRyeSkge1xuICAgICAgICB2YXIgbmFtZSA9IGZpbGVFbnRyeS5mdWxsUGF0aC5zdWJzdHIoZmlsZUVudHJ5LmZ1bGxQYXRoLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgICAgICAgdmFyIG5ld05hbWUgPSBtYWtlaWQoKSArIG5hbWU7XG5cbiAgICAgICAgd2luZG93LnJlc29sdmVMb2NhbEZpbGVTeXN0ZW1VUkwoY29yZG92YS5maWxlLmRhdGFEaXJlY3RvcnksIGZ1bmN0aW9uKGZpbGVTeXN0ZW0yKSB7XG4gICAgICAgICAgICBmaWxlRW50cnkuY29weVRvKFxuICAgICAgICAgICAgICBmaWxlU3lzdGVtMixcbiAgICAgICAgICAgICAgbmV3TmFtZSxcbiAgICAgICAgICAgICAgb25Db3B5U3VjY2VzcyxcbiAgICAgICAgICAgICAgZmFpbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZhaWwpO1xuICAgICAgfVxuXG4gICAgICAvLyA2XG4gICAgICBmdW5jdGlvbiBvbkNvcHlTdWNjZXNzKGVudHJ5KSB7XG4gICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNjb3BlLmltYWdlID0gZW50cnkubmF0aXZlVVJMO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZmFpbChlcnJvcikge1xuXG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG1ha2VpZCgpIHtcbiAgICAgICAgdmFyIHRleHQgPSBcIlwiO1xuICAgICAgICB2YXIgcG9zc2libGUgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5XCI7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgICAgICB0ZXh0ICs9IHBvc3NpYmxlLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZS5sZW5ndGgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgIH1cblxuICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgLy9jb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pO1xuICB9O1xuXG4gICRzY29wZS51cmxGb3JJbWFnZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbWFnZVVSTCA9IFwiaHR0cDovL3BsYWNlaG9sZC5pdC8yMDB4MjAwXCI7XG4gICAgaWYgKCRzY29wZS5pbWFnZSkge1xuICAgICAgdmFyIG5hbWUgPSAkc2NvcGUuaW1hZ2Uuc3Vic3RyKCRzY29wZS5pbWFnZS5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gICAgICBpbWFnZVVSTCA9IGNvcmRvdmEuZmlsZS5kYXRhRGlyZWN0b3J5ICsgbmFtZTtcbiAgICB9XG4gICAgLy9jb25zb2xlLmxvZyhcIkltYWdlVVJMID0gXCIgKyBpbWFnZVVSTCk7XG4gICAgcmV0dXJuIGltYWdlVVJMO1xuICB9O1xuXG5cbiAgICAkc2NvcGUuc2Nyb2xsTWUgPSBmdW5jdGlvbihhbmNob3JfaWQpe1xuICAgICAgJGxvY2F0aW9uLmhhc2goYW5jaG9yX2lkKTtcbiAgICAgIHZhciBoYW5kbGUgID0gJGlvbmljU2Nyb2xsRGVsZWdhdGUuJGdldEJ5SGFuZGxlKCdjb250ZW50Jyk7XG4gICAgICBoYW5kbGUuYW5jaG9yU2Nyb2xsKCk7XG4gICAgfVxuXG4gICAgJHNjb3BlLnNldF9hY3RpdmVfb3B0aW9uID0gZnVuY3Rpb24oYnV0dG9uaWQpIHtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGJ1dHRvbmlkKS5jbGFzc05hbWUgPSBcIm9wdGlvbi1hY3RpdmVcIjtcbiAgICB9XG5cbiAgICAkc2NvcGUuaGlkZV9zcGVjaWFsX2RpdnMgPSBmdW5jdGlvbigpe1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1c2VyLW9wdGlvbnMtbWVudVwiKS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO1xuICAgIH1cblxuICAgICRzY29wZS5jbG9zZV9yZXBvcnRfZGV0YWlsX21vZGFsID0gZnVuY3Rpb24oKXtcbiAgICAgIE1vZGFsU2VydmljZS5jaGVja05vTW9kYWxJc09wZW4oKTtcbiAgICAgICRzY29wZS5yZXBvcnRfZGV0YWlsX2lkID0gbnVsbDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIENlbnRlciBtYXAgb24gdXNlcidzIGN1cnJlbnQgcG9zaXRpb25cbiAgICAgKi9cbiAgICAkc2NvcGUubG9jYXRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICRjb3Jkb3ZhR2VvbG9jYXRpb25cbiAgICAgICAgLmdldEN1cnJlbnRQb3NpdGlvbigpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIubGF0ID0gcG9zaXRpb24uY29vcmRzLmxhdGl0dWRlO1xuICAgICAgICAgICRzY29wZS5tYXAuY2VudGVyLmxuZyA9IHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGU7XG4gICAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIuem9vbSA9IDE1O1xuXG4gICAgICAgICAgJHNjb3BlLm1hcC5tYXJrZXJzLm5vdyA9IHtcbiAgICAgICAgICAgIGxhdDogcG9zaXRpb24uY29vcmRzLmxhdGl0dWRlLFxuICAgICAgICAgICAgbG5nOiBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlLFxuICAgICAgICAgICAgbWVzc2FnZTogXCJZb3UgQXJlIEhlcmVcIixcbiAgICAgICAgICAgIGZvY3VzOiB0cnVlLFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgLy8gZXJyb3JcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiTG9jYXRpb24gZXJyb3IhXCIpO1xuICAgICAgICAgIC8vY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG5cblxuICAgICRzY29wZS5hZGRNYXBDb250cm9scyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwX2Nyb3NzaGFpcicpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwX2Nyb3NzaGFpcl9idXR0b24nKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gICAgfTtcblxuXG4gICAgJHNjb3BlLmNoYW5nZVVzZXJMb2NhdGlvblBpbiA9IGZ1bmN0aW9uKGxhdCxsb24sdWlkKXtcbiAgICAgIGlmKCRzY29wZS5vbmxpbmVfdXNlcl9nZW9fYXJyYXlbdWlkXSl7XG4gICAgICAgIGxheWVyID0gJHNjb3BlLm9ubGluZV91c2VyX2dlb19hcnJheVt1aWRdO1xuICAgICAgICB2YXIgbmV3TGF0TG5nID0gbmV3IEwuTGF0TG5nKGxhdCwgbG9uKTtcbiAgICAgICAgbGF5ZXIuc2V0TGF0TG5nKG5ld0xhdExuZyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHNjb3BlLmhpZGVPZmZTY3JlZW5QaW5zID0gZnVuY3Rpb24oKSB7XG4gICAgICAvKmxlYWZsZXREYXRhLmdldE1hcCgpLnRoZW4oZnVuY3Rpb24obWFwKSB7XG4gICAgICAgIHZhciBtYXBCb3VuZHMgPSBtYXAuZ2V0Qm91bmRzKCk7XG4gICAgICAgICRzY29wZS51c2Vyc1Zpc2libGUgPSBbXTtcbiAgICAgICAgICAkc2NvcGUub25saW5lX3VzZXJfZ2VvX2FycmF5LmZvckVhY2goZnVuY3Rpb24obGF5ZXIsa2V5KXtcbiAgICAgICAgICAgIHZhciBzaG91bGRCZVZpc2libGUgPSBtYXBCb3VuZHMuY29udGFpbnMobGF5ZXIuZ2V0TGF0TG5nKCkpO1xuICAgICAgICAgICAgaWYgKCFzaG91bGRCZVZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBtYXAucmVtb3ZlTGF5ZXIobGF5ZXIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzaG91bGRCZVZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBtYXAuYWRkTGF5ZXIobGF5ZXIpO1xuICAgICAgICAgICAgICAgICRzY29wZS51c2Vyc1Zpc2libGUucHVzaChsYXllci5mZWF0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgfSk7Ki9cbiAgICB9XG5cbiAgICAkc2NvcGUubG9hZFBpbnNMYXllciA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICBsZWFmbGV0RGF0YS5nZXRNYXAoKS50aGVuKGZ1bmN0aW9uKG1hcCkge1xuICAgICAgICAgIENrYW5TZXJ2aWNlLmdldEFsbFBvbHlnb25zKCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmKENrYW5TZXJ2aWNlLmxhc3RQaW5zUmVzcG9uc2U9PW51bGwgfHwgKENrYW5TZXJ2aWNlLmxhc3RQaW5zUmVzcG9uc2UgJiYgQ2thblNlcnZpY2UubGFzdFBpbnNSZXNwb25zZSE9cmVzcG9uc2UpKXtcbiAgICAgICAgICAgICAgaWYoJHNjb3BlLmFzZW50YW1pZW50b3NfbGF5ZXJzKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXNlbnRhbWllbnRvc19sYXllcnMuZm9yRWFjaChmdW5jdGlvbihsYXllcixrZXkpe1xuICAgICAgICAgICAgICAgICAgbWFwLnJlbW92ZUxheWVyKGxheWVyKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIENrYW5TZXJ2aWNlLmxhc3RQaW5zUmVzcG9uc2UgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhDa2FuU2VydmljZS5sYXN0UGluc1Jlc3BvbnNlKTtcbiAgICAgICAgICAgICAgQ2thblNlcnZpY2UubGFzdFBpbnNSZXNwb25zZS5yZXN1bHQucmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uKGZlYXR1cmUpe1xuICAgICAgICAgICAgICAgIGlmKCRzY29wZS5nZXRUeXBlT2ZNYXBPYmplY3QoZmVhdHVyZS53a3RfZ2VvbSk9PVwiUG9seWdvblwiKXtcbiAgICAgICAgICAgICAgICAgIHZhciBsYXRsbmdzID0gJHNjb3BlLmdldE9ubHlDb29yZGluYXRlc1BvbHlnb24oZmVhdHVyZS53a3RfZ2VvbSk7XG4gICAgICAgICAgICAgICAgICB2YXIgcG9seWdvbiA9IEwucG9seWdvbihsYXRsbmdzLCB7Y29sb3I6ICdyZWQnfSkuYmluZFBvcHVwKGZlYXR1cmUuTk9NX0FTVCArIFwiIC0gXCIgKyBmZWF0dXJlLkNPRF9BU1QgKyBcIiAtIFwiICsgZmVhdHVyZS53a3RfZ2VvbSkuYWRkVG8obWFwKTtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZigkc2NvcGUuZ2V0VHlwZU9mTWFwT2JqZWN0KGZlYXR1cmUud2t0X2dlb20pPT1cIk11bHRpUG9seWdvblwiKXtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8kc2NvcGUuYXNlbnRhbWllbnRvc19sYXllcnNbZmVhdHVyZS5DT0RfQVNUXSA9IGZlYXR1cmU7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhmZWF0dXJlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgIC8vJHNjb3BlLmhpZGVPZmZTY3JlZW5QaW5zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICRzY29wZS5nZXRPbmx5Q29vcmRpbmF0ZXNQb2x5Z29uID0gZnVuY3Rpb24od2t0X2dlb20pe1xuICAgIHdrdF9nZW9tID0gd2t0X2dlb20ucmVwbGFjZShcIlBvbHlnb24gKChcIixcIlwiKTtcbiAgICB3a3RfZ2VvbSA9IHdrdF9nZW9tLnJlcGxhY2UoXCIpKVwiLFwiXCIpO1xuICAgIHZhciBwb2ludHNBcnJheSA9IHdrdF9nZW9tLnNwbGl0KFwiLFwiKTtcbiAgICB2YXIgcG9seWdvblBvaW50c0Nvb3JkaW5hdGVzID0gbmV3IEFycmF5KCk7XG4gICAgcG9pbnRzQXJyYXkuZm9yRWFjaChmdW5jdGlvbihwb2ludCxrZXkpe1xuICAgICAgcG9pbnQgPSBwb2ludC50cmltKCk7XG4gICAgICB2YXIgY29vcmRpbmF0ZXNBcnJheSA9IHBvaW50LnNwbGl0KFwiIFwiKTtcbiAgICAgIHZhciBsYXQgPSBjb29yZGluYXRlc0FycmF5WzBdO1xuICAgICAgdmFyIGxvbiA9IGNvb3JkaW5hdGVzQXJyYXlbMV07XG4gICAgICB2YXIgbmV3Q29vcmRpbmF0ZXMgPSBQaW5TZXJ2aWNlLmNvbnZlcnRMYXRMb25nUHJvaihsYXQsbG9uLCRzY29wZSk7XG4gICAgICB2YXIgbGF0bG9uID0gW25ld0Nvb3JkaW5hdGVzLmxhdCwgbmV3Q29vcmRpbmF0ZXMubG5nXTtcbiAgICAgIHBvbHlnb25Qb2ludHNDb29yZGluYXRlcy5wdXNoKGxhdGxvbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBvbHlnb25Qb2ludHNDb29yZGluYXRlcztcbiAgfVxuXG4gICRzY29wZS5nZXRUeXBlT2ZNYXBPYmplY3QgPSBmdW5jdGlvbih3a3RfZ2VvbSl7XG4gICAgaWYod2t0X2dlb20uc3RhcnRzV2l0aChcIk11bHRpUG9seWdvblwiKSl7XG4gICAgICByZXR1cm4gXCJNdWx0aVBvbHlnb25cIjtcbiAgICB9XG4gICAgaWYod2t0X2dlb20uc3RhcnRzV2l0aChcIlBvbHlnb25cIikpe1xuICAgICAgcmV0dXJuIFwiUG9seWdvblwiO1xuICAgIH1cbiAgfVxuXG4gICAgLy9QQVJBIENPTlRST0xBUiBFTCBFTlRFUiBFTiBBTEdVTk9TIEZPUk1TXG4gICAgLyokc2NvcGUua2V5X3ByZXNzID0gZnVuY3Rpb24oZXZlbnQsc3RhZ2Upe1xuICAgICAgdmFyIGtleUNvZGUgPSBldmVudC5rZXlDb2RlO1xuICAgICAgaWYoc3RhZ2U9PSdwcml2YXRlX2NoYXQnKXtcbiAgICAgICAgaWYoa2V5Q29kZT09MTMpe1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZihjb3Jkb3ZhPT09bnVsbCl7XG5cbiAgICAgICAgICAgIH1lbHNlIGlmKGNvcmRvdmEmJmNvcmRvdmEucGx1Z2lucy5LZXlib2FyZCl7XG4gICAgICAgICAgICAgIGNvcmRvdmEucGx1Z2lucy5LZXlib2FyZC5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjYXRjaChlcnIpIHtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0qL1xuXG5cbiAgICAkc2NvcGUudGltZUNvbnZlcnRlciA9IGZ1bmN0aW9uKFVOSVhfdGltZXN0YW1wKXtcbiAgICAgIHZhciBhID0gbmV3IERhdGUoVU5JWF90aW1lc3RhbXAgKiAxMDAwKTtcbiAgICAgIHZhciBtb250aHMgPSBbJ0VuZXJvJywnRmVicmVybycsJ01hcnpvJywnQWJyaWwnLCdNYXlvJywnSnVuaW8nLCdKdWxpbycsJ0Fnb3N0bycsJ1NldGllbWJyZScsJ09jdHVicmUnLCdOb3ZpZW1icmUnLCdEaWNpZW1icmUnXTtcbiAgICAgIHZhciB5ZWFyID0gYS5nZXRGdWxsWWVhcigpO1xuICAgICAgLy92YXIgbW9udGggPSBtb250aHNbYS5nZXRNb250aCgpXTtcbiAgICAgIHZhciBtb250aCA9IGEuZ2V0TW9udGgoKTtcbiAgICAgIGlmKG1vbnRoPDEwKXtcbiAgICAgICAgbW9udGggPSBcIjBcIittb250aDtcbiAgICAgIH1cbiAgICAgIHZhciBkYXkgPSBhLmdldERhdGUoKTtcbiAgICAgIGlmKGRheTwxMCl7XG4gICAgICAgIGRheSA9IFwiMFwiK2RheTtcbiAgICAgIH1cbiAgICAgIHZhciBob3VyID0gYS5nZXRIb3VycygpO1xuICAgICAgaWYoaG91cjwxMCl7XG4gICAgICAgIGhvdXIgPSBcIjBcIitob3VyO1xuICAgICAgfVxuICAgICAgdmFyIG1pbiA9IGEuZ2V0TWludXRlcygpO1xuICAgICAgaWYobWluPDEwKXtcbiAgICAgICAgbWluID0gXCIwXCIrbWluO1xuICAgICAgfVxuICAgICAgdmFyIHNlYyA9IGEuZ2V0U2Vjb25kcygpO1xuICAgICAgdmFyIHRpbWUgPSBkYXkgKyAnLycgKyBtb250aCArICcvJyArIHllYXIgKyAnICcgKyBob3VyICsgJzonICsgbWluO1xuICAgICAgcmV0dXJuIHRpbWU7XG4gICAgfVxuXG5cblxuICAgIC8vIFN1Z2dlc3Rpb25cbiAgICAkc2NvcGUubW9kZWwgPSBbXTtcbiAgICAkc2NvcGUuZXh0ZXJuYWxNb2RlbCA9IFtdO1xuICAgICRzY29wZS5zZWxlY3RlZEl0ZW1zID0gW107XG4gICAgJHNjb3BlLnByZXNlbGVjdGVkU2VhcmNoSXRlbXMgPSBbXTtcbiAgICAkc2NvcGUuY2xpY2tlZFZhbHVlTW9kZWwgPSBcIlwiO1xuICAgICRzY29wZS5yZW1vdmVkVmFsdWVNb2RlbCA9IFwiXCI7XG5cblxuICAgICRzY29wZS5pdGVtc1JlbW92ZWQgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJHNjb3BlLnJlbW92ZWRWYWx1ZU1vZGVsID0gY2FsbGJhY2s7XG4gICAgfTtcblxuICAgICRzY29wZS51c2VyX29wdGlvbnMgPSBmdW5jdGlvbigpe1xuICAgICAgdmFyIG1lbnUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVzZXItb3B0aW9ucy1tZW51XCIpO1xuICAgICAgaWYobWVudS5zdHlsZS5kaXNwbGF5PT1cImJsb2NrXCIpe1xuICAgICAgICBtZW51LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgIH1lbHNle1xuICAgICAgICAvL2NvbnNvbGUubG9nKFVzZXJTZXJ2aWNlLm5hbWUpO1xuICAgICAgICB2YXIgbmFtZSA9IFVzZXJTZXJ2aWNlLm5hbWU7XG4gICAgICAgIGlmKG5hbWU9PW51bGwpe1xuICAgICAgICAgIC8vTm8gZXN0YSBsb2d1ZWFkb1xuICAgICAgICAgICRzY29wZS5zaG93X2Fub255bW91c19tZW51KCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIC8vRXN0w6EgbG9ndWVhZG9cbiAgICAgICAgICAkc2NvcGUuc2hvd191c2VyX21lbnUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgICRzY29wZS5zaG93X2Fub255bW91c19tZW51ID0gZnVuY3Rpb24oKXtcbiAgICAgIHZhciBtZW51ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1c2VyLW9wdGlvbnMtbWVudVwiKTtcbiAgICAgIHZhciBodG1sID0gXCI8ZGl2IGlkPSdhdXRoX29wdGlvbnMnPjxkaXYgY2xhc3M9J25vbmF1dGgtbGluaycgbmctY2xpY2s9J3Nob3dfbG9naW5fbW9kYWwoKSc+SW5pY2lhciBzZXNpw7NuPC9kaXY+XCI7XG4gICAgICBodG1sID0gaHRtbCArIFwiPGRpdiBjbGFzcz0nbm9uYXV0aC1saW5rJyBuZy1jbGljaz0nc2hvd19zaWduX3VwX21vZGFsKCknPlJlZ2lzdHJhcnNlPC9kaXY+PC9kaXY+XCI7XG4gICAgICBtZW51LmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAkY29tcGlsZShtZW51KSgkc2NvcGUpOyAvLzwtLS0tIHJlY29tcGlsYXRpb25cbiAgICAgIG1lbnUuc3R5bGUuaGVpZ2h0ID0gJzEyMHB4JztcbiAgICAgIG1lbnUuc3R5bGUud2lkdGggPSAnMTUwcHgnO1xuICAgICAgbWVudS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIH1cblxuICAgICRzY29wZS5zaG93X3VzZXJfbWVudSA9IGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgbWVudSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidXNlci1vcHRpb25zLW1lbnVcIik7XG4gICAgICB2YXIgaHRtbCA9IFVzZXJTZXJ2aWNlLm5hbWUgKyBcIjxkaXYgaWQ9J2F1dGhfb3B0aW9ucyc+PGRpdiBjbGFzcz0ndXNlci1sb2dnZWQtbGluaycgbmctY2xpY2s9J3Nob3dfZWRpdF9wcm9maWxlX21vZGFsKCknPk1pIHBlcmZpbDwvZGl2PlwiO1xuICAgICAgLy9odG1sID0gaHRtbCArIFwiPGRpdiBjbGFzcz0ndXNlci1sb2dnZWQtbGluaycgbmctY2xpY2s9J2NoYW5nZV9wYXNzd29yZCgpJz5DYW1iaWFyIGNvbnRyYXNlw7FhPC9kaXY+XCI7XG4gICAgICBodG1sID0gaHRtbCArIFwiPGRpdiBjbGFzcz0ndXNlci1sb2dnZWQtbGluaycgbmctY2xpY2s9J3NpZ25fb3V0KCknPkNlcnJhciBzZXNpw7NuPC9kaXY+PC9kaXY+XCI7XG4gICAgICBtZW51LmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAkY29tcGlsZShtZW51KSgkc2NvcGUpOyAvLzwtLS0tIHJlY29tcGlsYXRpb25cbiAgICAgIG1lbnUuc3R5bGUuaGVpZ2h0ID0gJzIyMHB4JztcbiAgICAgIG1lbnUuc3R5bGUud2lkdGggPSAnMjAwcHgnO1xuICAgICAgbWVudS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIH07XG5cbiAgICAkc2NvcGUuY3JlYXRlX2ZpZWxkX2FycmF5ID0gZnVuY3Rpb24obmFtZSx0eXBlLHZhbHVlKXtcbiAgICAgIHZhciBmaWVsZCA9IG5ldyBBcnJheSgpO1xuICAgICAgZmllbGQubmFtZSA9IG5hbWU7XG4gICAgICBmaWVsZC50eXBlID0gdHlwZTtcbiAgICAgIGZpZWxkLnZhbHVlID0gdmFsdWU7XG4gICAgICByZXR1cm4gZmllbGQ7XG4gICAgfTtcblxuICAgICRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXlfd2l0aF90d29GaWVsZHMgPSBmdW5jdGlvbihuYW1lLHR5cGUsdmFsdWUsc2Vjb25kVmFsdWUpe1xuICAgICAgdmFyIGZpZWxkID0gbmV3IEFycmF5KCk7XG4gICAgICBmaWVsZC5uYW1lID0gbmFtZTtcbiAgICAgIGZpZWxkLnR5cGUgPSB0eXBlO1xuICAgICAgZmllbGQudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGZpZWxkLnNlY29uZFZhbHVlID0gc2Vjb25kVmFsdWU7XG4gICAgICByZXR1cm4gZmllbGQ7XG4gICAgfTtcblxuICAgICRzY29wZS5maXhfZmJfaW1hZ2VfbGluayA9IGZ1bmN0aW9uKHVybCl7XG4gICAgICBpZih1cmwuaW5kZXhPZihcImh0dHA6Ly9ncmFwaC5mYWNlYm9vay5jb21cIikgPj0gMCl7XG4gICAgICAgIHZhciBwYXJ0cyA9IHVybC5zcGxpdChcImh0dHA6Ly9ncmFwaC5mYWNlYm9vay5jb21cIik7XG4gICAgICAgIHZhciBuZXdVcmwgPSBcImh0dHA6Ly9ncmFwaC5mYWNlYm9vay5jb21cIitwYXJ0c1sxXTtcbiAgICAgICAgcmV0dXJuIG5ld1VybDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1cmw7XG4gICAgfTtcblxuICAgICRzY29wZS5sb2dfaW4gPSBmdW5jdGlvbih1c2VyLCBwYXNzd29yZCl7XG4gICAgICBpZihTZW1hcGhvcmVTZXJ2aWNlLnRha2VJZkF2YWlsYWJsZShcInN1Ym1pdC1mb3JtXCIpKXtcbiAgICAgICAgaWYoQ29ubmVjdGl2aXR5U2VydmljZS5pc09ubGluZSgpKXtcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgdmFyIGZpZWxkcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJVc3VhcmlvXCIsXCJub3ROdWxsXCIsdXNlcikpO1xuICAgICAgICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJDb250cmFzZcOxYVwiLFwibm90TnVsbFwiLHBhc3N3b3JkKSk7XG4gICAgICAgICAgaWYoRXJyb3JTZXJ2aWNlLmNoZWNrX2ZpZWxkcyhmaWVsZHMsXCJlcnJvcl9jb250YWluZXJcIikpe1xuICAgICAgICAgICAgQXV0aFNlcnZpY2UubG9nX2luKHVzZXIscGFzc3dvcmQpLnRoZW4oZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICAgICAgICBpZihFcnJvclNlcnZpY2UuaHR0cF9yZXNwb25zZV9pc19zdWNjZXNzZnVsKHJlc3AsXCJlcnJvcl9jb250YWluZXJcIikpe1xuICAgICAgICAgICAgICAgIHBob3RvID0gJHNjb3BlLmZpeF9mYl9pbWFnZV9saW5rKCRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLlBob3RvKTtcbiAgICAgICAgICAgICAgICBpZihwaG90bz09XCJhbm9uXCIpe1xuICAgICAgICAgICAgICAgICAgcGhvdG89XCJ1cmwoLi9pbWcvaWNvbi11c2VyLWFub255bW91cy5wbmcpXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFVzZXJTZXJ2aWNlLnNhdmVfdXNlcl9kYXRhKCRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLk5hbWUsICRzY29wZS5ub25hdXRoLnBhc3N3b3JkLCBwaG90bywgJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuU2hvd0xvY2F0aW9uLCAkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5VaWQsICRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLkVzdGFkbywgJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuR2VuZGVyLCAkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5JbnRlcmVzdGVkSW4pO1xuICAgICAgICAgICAgICAgIERCU2VydmljZS5zYXZlVXNlcigkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5OYW1lLCRzY29wZS5ub25hdXRoLnBhc3N3b3JkLHBob3RvLCRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLlNob3dMb2NhdGlvbiwkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5VaWQsJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuRXN0YWRvLCAkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5HZW5kZXIsICRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLkludGVyZXN0ZWRJbik7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNldF91c2VyX3BpY3R1cmUoMSk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyLWluc2lkZS1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgU2VtYXBob3JlU2VydmljZS5tYWtlQXZhaWxhYmxlQWdhaW4oXCJzdWJtaXQtZm9ybVwiKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2xvc2VfbG9naW5fbW9kYWwoKTtcbiAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgU2VtYXBob3JlU2VydmljZS5tYWtlQXZhaWxhYmxlQWdhaW4oXCJzdWJtaXQtZm9ybVwiKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgIC8vYWxlcnQoXCJFcnJvciBlbiBzaWduX2luXCIpO1xuICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgU2VtYXBob3JlU2VydmljZS5tYWtlQXZhaWxhYmxlQWdhaW4oXCJzdWJtaXQtZm9ybVwiKTtcbiAgICAgICAgICAgICAgRXJyb3JTZXJ2aWNlLnNob3dfZXJyb3JfbWVzc2FnZShcImVycm9yX2NvbnRhaW5lclwiLHJlc3Auc3RhdHVzVGV4dCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lci1pbnNpZGUtbW9kYWxcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgU2VtYXBob3JlU2VydmljZS5tYWtlQXZhaWxhYmxlQWdhaW4oXCJzdWJtaXQtZm9ybVwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgU2VtYXBob3JlU2VydmljZS5tYWtlQXZhaWxhYmxlQWdhaW4oXCJzdWJtaXQtZm9ybVwiKTtcbiAgICAgICAgICBQb3BVcFNlcnZpY2Uuc2hvd19hbGVydChcIlNpbiBjb25leGnDs24gYSBpbnRlcm5ldFwiLFwiUGFyYSBpbmljaWFyIHNlc2nDs24gZGViZSBlc3RhciBjb25lY3RhZG8gYSBpbnRlcm5ldFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgICRzY29wZS5sb2dfaW5fYmFja2dyb3VuZCA9IGZ1bmN0aW9uKHVzZXIsIHBhc3N3b3JkKXtcbiAgICAgIEF1dGhTZXJ2aWNlLmxvZ19pbih1c2VyLHBhc3N3b3JkKS50aGVuKGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgaWYoRXJyb3JTZXJ2aWNlLmh0dHBfcmVzcG9uc2VfaXNfc3VjY2Vzc2Z1bF9hamF4KHJlc3ApKXtcbiAgICAgICAgICBwaG90byA9ICRzY29wZS5maXhfZmJfaW1hZ2VfbGluaygkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5QaG90byk7XG4gICAgICAgICAgaWYocGhvdG89PVwiYW5vblwiKXtcbiAgICAgICAgICAgIHBob3RvPVwidXJsKC4vaW1nL2ljb24tdXNlci1hbm9ueW1vdXMucG5nKVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBVc2VyU2VydmljZS5zYXZlX3VzZXJfZGF0YSgkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5OYW1lLCBwYXNzd29yZCwgcGhvdG8sICRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLlNob3dMb2NhdGlvbiwgJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuVWlkLCAkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5Fc3RhZG8sICRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLkdlbmRlciwgJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuSW50ZXJlc3RlZEluKTtcbiAgICAgICAgICBEQlNlcnZpY2Uuc2F2ZVVzZXIoJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuTmFtZSxwYXNzd29yZCxwaG90bywkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5TaG93TG9jYXRpb24sJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuVWlkLCRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLkVzdGFkbywgJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuR2VuZGVyLCAkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5JbnRlcmVzdGVkSW4pO1xuXG4gICAgICAgICAgJHNjb3BlLnNldF91c2VyX3BpY3R1cmUoMSk7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgIH0sIGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAvL0Vycm9yU2VydmljZS5zaG93X2Vycm9yX21lc3NhZ2VfcG9wdXAocmVzcC5zdGF0dXNUZXh0KTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9KTtcbiAgICB9XG5cblxuXG4gICAgJHNjb3BlLnNpZ25fb3V0ID0gZnVuY3Rpb24oKXtcbiAgICAgIFVzZXJTZXJ2aWNlLmVyYXNlX3VzZXJfZGF0YSgpO1xuICAgICAgREJTZXJ2aWNlLmVyYXNlVXNlcigpO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICRzY29wZS5zZXRfdXNlcl9waWN0dXJlKDApO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1c2VyLW9wdGlvbnMtbWVudVwiKS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO1xuICAgIH1cblxuICAgICRzY29wZS5zaG93X2VkaXRfcHJvZmlsZV9tb2RhbCA9IGZ1bmN0aW9uKCl7XG4gICAgICAvL0NhcmdhciBlbCBtb2RhbCBjb24gbGEgaW5mbyBkZWwgdXN1YXJpbyBsb2d1ZWFkbyB5IGNvbiBlbCBzdWJtaXQgYSBlZGl0X3Byb2ZpbGVfb2tcbiAgICAgIGlmKFNlbWFwaG9yZVNlcnZpY2UudGFrZUlmQXZhaWxhYmxlKFwib3Blbi1tb2RhbFwiKSl7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAkc2NvcGUubmV3dXNlciA9IG5ldyBBcnJheSgpO1xuICAgICAgICAkc2NvcGUubmV3dXNlci5lbWFpbCA9IFVzZXJTZXJ2aWNlLmVtYWlsO1xuICAgICAgICAkc2NvcGUubmV3dXNlci5nZW5kZXIgPSBVc2VyU2VydmljZS5nZW5kZXI7XG4gICAgICAgICRzY29wZS5uZXd1c2VyLnVzZXJuYW1lID0gVXNlclNlcnZpY2UubmFtZTtcbiAgICAgICAgJHNjb3BlLm5ld3VzZXIuaW50ZXJlc3RlZCA9IFVzZXJTZXJ2aWNlLmludGVyZXN0ZWQ7XG4gICAgICAgICRzY29wZS5uZXd1c2VyLnN0YXR1cyA9IFVzZXJTZXJ2aWNlLnN0YXR1cztcbiAgICAgICAgJHNjb3BlLm5ld3VzZXIuc2hvd19sb2NhdGlvbiA9IFVzZXJTZXJ2aWNlLnNob3dfbG9jYXRpb247XG4gICAgICAgICRzY29wZS5hY3R1YWxfcGhvdG8gPSBVc2VyU2VydmljZS5waWN0dXJlX3VybDtcbiAgICAgICAgaWYoJHNjb3BlLmFjdHVhbF9waG90byE9bnVsbCl7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICRzY29wZS5hY3R1YWxfcGhvdG8gPSBcIi4vaW1nL2ljb24tdXNlci1hbm9ueW1vdXMucG5nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYoJHNjb3BlLmFjdHVhbF9waG90bz09XCJ1cmwoLi9pbWcvaWNvbi11c2VyLWFub255bW91cy5wbmcpXCIpe1xuICAgICAgICAgICRzY29wZS5hY3R1YWxfcGhvdG8gPSBcIi4vaW1nL2ljb24tdXNlci1hbm9ueW1vdXMucG5nXCI7XG4gICAgICAgIH1cbiAgICAgICAgTW9kYWxTZXJ2aWNlLmNoZWNrTm9Nb2RhbElzT3BlbigpO1xuICAgICAgICAgIGlmKFZhbGlkYXRpb25TZXJ2aWNlLmlzTW9iaWxlRGV2aWNlKCkpe1xuICAgICAgICAgICAgJGlvbmljTW9kYWwuZnJvbVRlbXBsYXRlVXJsKCd0ZW1wbGF0ZXMvZWRpdF9wcm9maWxlX3dpdGhfcGhvdG8uaHRtbCcsIHtcbiAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgICAgIGhhcmR3YXJlQmFja0J1dHRvbkNsb3NlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb246ICdzbGlkZS1pbi11cCcsXG4gICAgICAgICAgICAgICAgLy9mb2N1c0ZpcnN0SW5wdXQ6IHRydWVcbiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihtb2RhbCkge1xuICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidXNlci1vcHRpb25zLW1lbnVcIikuc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtcbiAgICAgICAgICAgICAgICAgIE1vZGFsU2VydmljZS5hY3RpdmVNb2RhbCA9IG1vZGFsO1xuICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb290X2JhclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgICBNb2RhbFNlcnZpY2UuYWN0aXZlTW9kYWwuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgU2VtYXBob3JlU2VydmljZS5tYWtlQXZhaWxhYmxlQWdhaW4oXCJvcGVuLW1vZGFsXCIpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICRpb25pY01vZGFsLmZyb21UZW1wbGF0ZVVybCgndGVtcGxhdGVzL2VkaXRfcHJvZmlsZV93aXRoX3Bob3RvX2Rlc2t0b3AuaHRtbCcsIHtcbiAgICAgICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICAgICAgaGFyZHdhcmVCYWNrQnV0dG9uQ2xvc2U6IGZhbHNlLFxuICAgICAgICAgICAgICBhbmltYXRpb246ICdzbGlkZS1pbi11cCcsXG4gICAgICAgICAgICAgIC8vZm9jdXNGaXJzdElucHV0OiB0cnVlXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKG1vZGFsKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVzZXItb3B0aW9ucy1tZW51XCIpLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7XG4gICAgICAgICAgICAgICAgTW9kYWxTZXJ2aWNlLmFjdGl2ZU1vZGFsID0gbW9kYWw7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb290X2JhclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgTW9kYWxTZXJ2aWNlLmFjdGl2ZU1vZGFsLnNob3coKTtcbiAgICAgICAgICAgICAgICBTZW1hcGhvcmVTZXJ2aWNlLm1ha2VBdmFpbGFibGVBZ2FpbihcIm9wZW4tbW9kYWxcIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgICRzY29wZS5yZWFkVVJMID0gZnVuY3Rpb24gKGlucHV0LHR5cGUpIHtcbiAgICAgIGlmIChpbnB1dC5maWxlcyAmJiBpbnB1dC5maWxlc1swXSkge1xuICAgICAgICBpZih0eXBlPT0xKXtcbiAgICAgICAgICAkc2NvcGUubmV3dXNlci5waWN0dXJlX3VybCA9IGlucHV0LmZpbGVzWzBdO1xuICAgICAgICAgICAgfWVsc2UgaWYgKHR5cGU9PTIpe1xuICAgICAgICAgICRzY29wZS5jb21tZW50LnBob3RvID0gaW5wdXQuZmlsZXNbMF07XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICRzY29wZS5yZXBvcnQuZmlsZSA9IGlucHV0LmZpbGVzWzBdO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlJbWFnZVwiKS5zcmMgPSBlLnRhcmdldC5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoaW5wdXQuZmlsZXNbMF0pO1xuICAgIH1cblxuICAgIH1cblxuICAgICRzY29wZS5jbG9zZV9lZGl0X3Byb2ZpbGVfbW9kYWwgPSBmdW5jdGlvbigpe1xuICAgICAgLy9DYXJnYXIgZWwgbW9kYWwgY29uIGxhIGluZm8gZGVsIHVzdWFyaW8gbG9ndWVhZG8geSBjb24gZWwgc3VibWl0IGEgdXBkYXRlX3VzZXJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9vdF9iYXJcIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIE1vZGFsU2VydmljZS5jaGVja05vTW9kYWxJc09wZW4oKTtcbiAgICB9XG5cbiAgICAkc2NvcGUuZWRpdF9wcm9maWxlX29rID0gZnVuY3Rpb24oKXtcbiAgICAgICRzY29wZS5lZGl0X3Byb2ZpbGUoKTtcbiAgICB9XG5cbiAgICAkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZSA9IGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgIGlmKHJlc3BvbnNlLmRhdGEpe1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgIH1lbHNle1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHNjb3BlLmVkaXRfcHJvZmlsZSA9IGZ1bmN0aW9uKCl7XG4gICAgICBpZihTZW1hcGhvcmVTZXJ2aWNlLnRha2VJZkF2YWlsYWJsZShcInN1Ym1pdC1mb3JtXCIpKXtcbiAgICAgICAgaWYoQ29ubmVjdGl2aXR5U2VydmljZS5pc09ubGluZSgpKXtcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgLyp2YXIgZmllbGRzID0gbmV3IEFycmF5KCk7XG4gICAgICAgICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheShcIkNvcnJlbyBlbGVjdHLDs25pY29cIixcImVtYWlsXCIsbmV3X2VtYWlsKSk7XG4gICAgICAgICAgLy9maWVsZHMucHVzaCgkc2NvcGUuY3JlYXRlX2ZpZWxkX2FycmF5KFwiQ29udHJhc2XDsWFcIixcIm5vdE51bGxcIixwYXNzd29yZCkpO1xuICAgICAgICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJDw6lkdWxhIGRlIElkZW50aWRhZFwiLFwiaWRkb2NfdXlcIixpZF9kb2MpKTtcbiAgICAgICAgICBmaWVsZHMucHVzaCgkc2NvcGUuY3JlYXRlX2ZpZWxkX2FycmF5KFwiTm9tYnJlIHkgYXBlbGxpZG9cIixcInR3b193b3Jkc1wiLGZ1bGxuYW1lKSk7Ki9cbiAgICAgICAgICAvKmlmKEVycm9yU2VydmljZS5jaGVja19maWVsZHMoZmllbGRzLFwiZXJyb3JfY29udGFpbmVyXCIpKXsqL1xuICAgICAgICAgICRzY29wZS5uZXd1c2VyLnBhc3N3b3JkID0gVXNlclNlcnZpY2UucGFzc3dvcmQ7XG4gICAgICAgICAgICB2YXIgZWRpdF9yZXF1ZXN0ID0gQXV0aFNlcnZpY2UuZWRpdF91c2VyKCRzY29wZS5uZXd1c2VyKTtcbiAgICAgICAgICAgIGlmKCRzY29wZS5uZXd1c2VyLnBpY3R1cmVfdXJsPT1udWxsIHx8ICRzY29wZS5uZXd1c2VyLnBpY3R1cmVfdXJsPT1cIlwiIHx8ICFWYWxpZGF0aW9uU2VydmljZS5pc01vYmlsZURldmljZSgpKXtcbiAgICAgICAgICAgICAgZWRpdF9yZXF1ZXN0LnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcCl7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZW50X2xhYmVsXCIpLmlubmVySFRNTCA9IFwiRW52aWFkbzogMTAwJVwiO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cocmVzcCk7XG4gICAgICAgICAgICAgICAgaWYoRXJyb3JTZXJ2aWNlLmh0dHBfcmVzcG9uc2VfaXNfc3VjY2Vzc2Z1bChyZXNwLFwiZXJyb3JfY29udGFpbmVyXCIpKXtcbiAgICAgICAgICAgICAgICAgIFVzZXJTZXJ2aWNlLnNhdmVfdXNlcl9kYXRhKCRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLk5hbWUsICRzY29wZS5uZXd1c2VyLnBhc3N3b3JkLCAkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5QaG90bywgJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuU2hvd0xvY2F0aW9uLCAkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5VaWQsICRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLkVzdGFkbywgJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuR2VuZGVyLCAkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5JbnRlcmVzdGVkSW4pO1xuICAgICAgICAgICAgICAgICAgREJTZXJ2aWNlLnNhdmVVc2VyKCRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLk5hbWUsJHNjb3BlLm5ld3VzZXIucGFzc3dvcmQsJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuUGhvdG8sJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuU2hvd0xvY2F0aW9uLCRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLlVpZCwkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5Fc3RhZG8sICRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLkdlbmRlciwgJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuSW50ZXJlc3RlZEluKTtcbiAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lci1pbnNpZGUtbW9kYWxcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgICAgU2VtYXBob3JlU2VydmljZS5tYWtlQXZhaWxhYmxlQWdhaW4oXCJzdWJtaXQtZm9ybVwiKTtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5jbG9zZV9lZGl0X3Byb2ZpbGVfbW9kYWwoKTtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5jaGVja191c2VyX2xvZ2dlZCgpO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgU2VtYXBob3JlU2VydmljZS5tYWtlQXZhaWxhYmxlQWdhaW4oXCJzdWJtaXQtZm9ybVwiKTtcbiAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lci1pbnNpZGUtbW9kYWxcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycyxjb25maWcpe1xuICAgICAgICAgICAgICAgIEVycm9yU2VydmljZS5zaG93X2Vycm9yX21lc3NhZ2UoXCJlcnJvcl9jb250YWluZXJcIixzdGF0dXMpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lci1pbnNpZGUtbW9kYWxcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIFNlbWFwaG9yZVNlcnZpY2UubWFrZUF2YWlsYWJsZUFnYWluKFwic3VibWl0LWZvcm1cIik7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgZWRpdF9yZXF1ZXN0LnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHJlc3VsdC5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgaWYoRXJyb3JTZXJ2aWNlLmh0dHBfZGF0YV9yZXNwb25zZV9pc19zdWNjZXNzZnVsKGRhdGEsXCJlcnJvcl9jb250YWluZXJcIikpe1xuICAgICAgICAgICAgICAgICAgZGF0YSA9ICRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgVXNlclNlcnZpY2Uuc2F2ZV91c2VyX2RhdGEoZGF0YS5OYW1lLCAkc2NvcGUubmV3dXNlci5wYXNzd29yZCwgZGF0YS5QaG90bywgZGF0YS5TaG93TG9jYXRpb24sIGRhdGEuVWlkLCBkYXRhLkVzdGFkbywgZGF0YS5HZW5kZXIsIGRhdGEuSW50ZXJlc3RlZEluKTtcbiAgICAgICAgICAgICAgICAgIERCU2VydmljZS5zYXZlVXNlcihkYXRhLk5hbWUsJHNjb3BlLm5ld3VzZXIucGFzc3dvcmQsZGF0YS5QaG90byxkYXRhLlNob3dMb2NhdGlvbixkYXRhLlVpZCxkYXRhLkVzdGFkbywgZGF0YS5HZW5kZXIsIGRhdGEuSW50ZXJlc3RlZEluKTtcbiAgICAgICAgICAgICAgICAgIFNlbWFwaG9yZVNlcnZpY2UubWFrZUF2YWlsYWJsZUFnYWluKFwic3VibWl0LWZvcm1cIik7XG4gICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5jbG9zZV9lZGl0X3Byb2ZpbGVfbW9kYWwoKTtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5jaGVja191c2VyX2xvZ2dlZCgpO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgU2VtYXBob3JlU2VydmljZS5tYWtlQXZhaWxhYmxlQWdhaW4oXCJzdWJtaXQtZm9ybVwiKTtcbiAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lci1pbnNpZGUtbW9kYWxcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWxlcnQgPSBcIkPDs2RpZ286IFwiICsgZXJyb3IuY29kZTtcbiAgICAgICAgICAgICAgICBhbGVydCA9IGFsZXJ0ICsgXCIgT3JpZ2VuOiBcIiArIGVycm9yLnNvdXJjZTtcbiAgICAgICAgICAgICAgICBhbGVydCA9IGFsZXJ0ICsgXCIgRGVzdGlubzogXCIgKyBlcnJvci50YXJnZXQ7XG4gICAgICAgICAgICAgICAgYWxlcnQgPSBhbGVydCArIFwiIGh0dHBfc3RhdHVzOiBcIiArIGVycm9yLmh0dHBfc3RhdHVzO1xuICAgICAgICAgICAgICAgIGFsZXJ0ID0gYWxlcnQgKyBcIiBCb2R5OiBcIiArIGVycm9yLmJvZHk7XG4gICAgICAgICAgICAgICAgYWxlcnQgPSBhbGVydCArIFwiIEV4Y2VwdGlvbjogXCIgKyBlcnJvci5leGNlcHRpb247XG4gICAgICAgICAgICAgICAgRXJyb3JTZXJ2aWNlLnNob3dfZXJyb3JfbWVzc2FnZShcImVycm9yX2NvbnRhaW5lclwiLFwiSHVibyB1biBlcnJvciBlbiBlbCBlbnbDrW86IFwiICsgYWxlcnQpO1xuICAgICAgICAgICAgICAgIFNlbWFwaG9yZVNlcnZpY2UubWFrZUF2YWlsYWJsZUFnYWluKFwic3VibWl0LWZvcm1cIik7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyLWluc2lkZS1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwbG9hZFByb2dyZXNzID0gKHByb2dyZXNzLmxvYWRlZCAvIHByb2dyZXNzLnRvdGFsKSAqIDEwMDtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZW50X2xhYmVsXCIpLmlubmVySFRNTCA9IFwiRW52aWFkbzogXCIgKyBNYXRoLnJvdW5kKCRzY29wZS51cGxvYWRQcm9ncmVzcykgKyBcIiVcIjtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvKn1lbHNle1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyLWluc2lkZS1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgfSovXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIFNlbWFwaG9yZVNlcnZpY2UubWFrZUF2YWlsYWJsZUFnYWluKFwic3VibWl0LWZvcm1cIik7XG4gICAgICAgICAgUG9wVXBTZXJ2aWNlLnNob3dfYWxlcnQoXCJTaW4gY29uZXhpw7NuIGEgaW50ZXJuZXRcIixcIlBhcmEgZWRpdGFyIHN1IHBlcmZpbCBkZWJlIGVzdGFyIGNvbmVjdGFkbyBhIGludGVybmV0XCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAkc2NvcGUuc2hvd19sb2dpbl9tb2RhbCA9IGZ1bmN0aW9uKCl7XG4gICAgICAvL0NhcmdhciBlbCBtb2RhbCBjb24gZWwgZm9ybSBkZSBsb2dpbiB5IGFoaSBsbGFtYSBhbCBzaWduX2luXG4gICAgICBpZihTZW1hcGhvcmVTZXJ2aWNlLnRha2VJZkF2YWlsYWJsZShcIm9wZW4tbW9kYWxcIikpe1xuICAgICAgICAkc2NvcGUubm9uYXV0aCA9IG5ldyBBcnJheSgpO1xuICAgICAgICAkc2NvcGUubm9uYXV0aC51c2VyID0gXCJcIjtcbiAgICAgICAgJHNjb3BlLm5vbmF1dGgucGFzc3dvcmQgPSBcIlwiO1xuICAgICAgICBNb2RhbFNlcnZpY2UuY2hlY2tOb01vZGFsSXNPcGVuKCk7XG4gICAgICAgICRpb25pY01vZGFsLmZyb21UZW1wbGF0ZVVybCgndGVtcGxhdGVzL2xvZ19pbi5odG1sJywge1xuICAgICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICAgIGhhcmR3YXJlQmFja0J1dHRvbkNsb3NlOiBmYWxzZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogJ3NsaWRlLWluLXVwJyxcbiAgICAgICAgICAgIC8vZm9jdXNGaXJzdElucHV0OiB0cnVlXG4gICAgICAgICAgfSkudGhlbihmdW5jdGlvbihtb2RhbCkge1xuICAgICAgICAgICAgICAkc2NvcGUuaGlkZV9zcGVjaWFsX2RpdnMoKTtcbiAgICAgICAgICAgICAgTW9kYWxTZXJ2aWNlLmFjdGl2ZU1vZGFsID0gbW9kYWw7XG4gICAgICAgICAgICAgIFNlbWFwaG9yZVNlcnZpY2UubWFrZUF2YWlsYWJsZUFnYWluKFwib3Blbi1tb2RhbFwiKTtcbiAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb290X2JhclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgIE1vZGFsU2VydmljZS5hY3RpdmVNb2RhbC5zaG93KCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHNjb3BlLmxvZ2luX29rID0gZnVuY3Rpb24oKXtcbiAgICAgICRzY29wZS5sb2dfaW4oJHNjb3BlLm5vbmF1dGgudXNlciwkc2NvcGUubm9uYXV0aC5wYXNzd29yZCk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmNsb3NlX2xvZ2luX21vZGFsID0gZnVuY3Rpb24oKXtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9vdF9iYXJcIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIE1vZGFsU2VydmljZS5jaGVja05vTW9kYWxJc09wZW4oKTtcbiAgICB9XG5cblxuXG4gICAgJHNjb3BlLnNob3dfc2lnbl91cF9tb2RhbCA9IGZ1bmN0aW9uKCl7XG4gICAgICAvL2NhcmdhciBlbCBtb2RhbCBjb24gZWwgZm9ybSBkZSBzaWduX3VwIHkgZGUgYWhpIGxsYW1hciBhbCBzaWduX3VwXG4gICAgICBpZihTZW1hcGhvcmVTZXJ2aWNlLnRha2VJZkF2YWlsYWJsZShcIm9wZW4tbW9kYWxcIikpe1xuICAgICAgICAkc2NvcGUubmV3dXNlciA9IG5ldyBBcnJheSgpO1xuICAgICAgICAkc2NvcGUubmV3dXNlci5lbWFpbCA9IFwiXCI7XG4gICAgICAgICRzY29wZS5uZXd1c2VyLnBhc3N3b3JkID0gXCJcIjtcbiAgICAgICAgJHNjb3BlLm5ld3VzZXIuZnVsbG5hbWUgPSBcIlwiO1xuICAgICAgICAkc2NvcGUubmV3dXNlci5pZF9kb2MgPSBcIlwiO1xuICAgICAgICAkc2NvcGUubmV3dXNlci50ZWxlcGhvbmUgPSBcIlwiO1xuICAgICAgICAkc2NvcGUubmV3dXNlci5waG90byA9IFwiXCI7XG4gICAgICAgIE1vZGFsU2VydmljZS5jaGVja05vTW9kYWxJc09wZW4oKTtcbiAgICAgICAgaWYoVmFsaWRhdGlvblNlcnZpY2UuaXNNb2JpbGVEZXZpY2UoKSl7XG4gICAgICAgICAgJGlvbmljTW9kYWwuZnJvbVRlbXBsYXRlVXJsKCd0ZW1wbGF0ZXMvc2lnbl91cC5odG1sJywge1xuICAgICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgICBoYXJkd2FyZUJhY2tCdXR0b25DbG9zZTogZmFsc2UsXG4gICAgICAgICAgICAgIGFuaW1hdGlvbjogJ3NsaWRlLWluLXVwJyxcbiAgICAgICAgICAgICAgLy9mb2N1c0ZpcnN0SW5wdXQ6IHRydWVcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuaGlkZV9zcGVjaWFsX2RpdnMoKTtcbiAgICAgICAgICAgICAgICBNb2RhbFNlcnZpY2UuYWN0aXZlTW9kYWwgPSBtb2RhbDtcbiAgICAgICAgICAgICAgICBTZW1hcGhvcmVTZXJ2aWNlLm1ha2VBdmFpbGFibGVBZ2FpbihcIm9wZW4tbW9kYWxcIik7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb290X2JhclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgTW9kYWxTZXJ2aWNlLmFjdGl2ZU1vZGFsLnNob3coKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAkaW9uaWNNb2RhbC5mcm9tVGVtcGxhdGVVcmwoJ3RlbXBsYXRlcy9zaWduX3VwX2Rlc2t0b3AuaHRtbCcsIHtcbiAgICAgICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICAgICAgaGFyZHdhcmVCYWNrQnV0dG9uQ2xvc2U6IGZhbHNlLFxuICAgICAgICAgICAgICBhbmltYXRpb246ICdzbGlkZS1pbi11cCcsXG4gICAgICAgICAgICAgIC8vZm9jdXNGaXJzdElucHV0OiB0cnVlXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKG1vZGFsKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmhpZGVfc3BlY2lhbF9kaXZzKCk7XG4gICAgICAgICAgICAgICAgTW9kYWxTZXJ2aWNlLmFjdGl2ZU1vZGFsID0gbW9kYWw7XG4gICAgICAgICAgICAgICAgU2VtYXBob3JlU2VydmljZS5tYWtlQXZhaWxhYmxlQWdhaW4oXCJvcGVuLW1vZGFsXCIpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9vdF9iYXJcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIE1vZGFsU2VydmljZS5hY3RpdmVNb2RhbC5zaG93KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfVxuXG4gICAgJHNjb3BlLmNsb3NlX3NpZ25fdXBfbW9kYWwgPSBmdW5jdGlvbigpe1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb290X2JhclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgTW9kYWxTZXJ2aWNlLmNoZWNrTm9Nb2RhbElzT3BlbigpO1xuICAgIH1cblxuICAgICRzY29wZS5zaWduX3VwID0gZnVuY3Rpb24oKXtcbiAgICAgIGlmKFNlbWFwaG9yZVNlcnZpY2UudGFrZUlmQXZhaWxhYmxlKFwic3VibWl0LWZvcm1cIikpe1xuICAgICAgICBpZihDb25uZWN0aXZpdHlTZXJ2aWNlLmlzT25saW5lKCkpe1xuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lci1pbnNpZGUtbW9kYWxcIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICB2YXIgZmllbGRzID0gbmV3IEFycmF5KCk7XG4gICAgICAgICAgLypmaWVsZHMucHVzaCgkc2NvcGUuY3JlYXRlX2ZpZWxkX2FycmF5KFwiQ29ycmVvIGVsZWN0csOzbmljb1wiLFwiZW1haWxcIiwkc2NvcGUubmV3dXNlci5lbWFpbCkpO1xuICAgICAgICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJDb250cmFzZcOxYVwiLFwibm90TnVsbFwiLCRzY29wZS5uZXd1c2VyLnBhc3N3b3JkKSk7XG4gICAgICAgICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheShcIlVzdWFyaW9cIixcIm5vdE51bGxcIiwkc2NvcGUubmV3dXNlci51c2VybmFtZSkpO1xuICAgICAgICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJHw6luZXJvXCIsXCJub3ROdWxsXCIsJHNjb3BlLm5ld3VzZXIuZ2VuZGVyKSk7XG4gICAgICAgICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheShcIkludGVyZXNhZG8gZW5cIixcIm5vdE51bGxcIiwkc2NvcGUubmV3dXNlci5pbnRlcmVzdGVkKSk7XG4gICAgICAgICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheShcIkVzdGFkb1wiLFwibm90TnVsbFwiLCRzY29wZS5uZXd1c2VyLnN0YXR1cykpO1xuICAgICAgICAgIGZpZWxkcy5wdXNoKCRzY29wZS5jcmVhdGVfZmllbGRfYXJyYXkoXCJNb3N0cmFyIHViaWNhY2nDs25cIixcIm5vdE51bGxcIiwkc2NvcGUubmV3dXNlci5zaG93X2xvY2F0aW9uKSk7XG4gICAgICAgICAgZmllbGRzLnB1c2goJHNjb3BlLmNyZWF0ZV9maWVsZF9hcnJheV93aXRoX3R3b0ZpZWxkcyhcIidDb250cmFzZcOxYScgeSAnQ29uZmlybWFyIGNvbnRyYXNlw7FhJ1wiLFwiZXF1YWxzVG9cIiwkc2NvcGUubmV3dXNlci5wYXNzd29yZCwgJHNjb3BlLm5ld3VzZXIucmVwYXNzd29yZCkpOyovXG4gICAgICAgICAgLy9pZihFcnJvclNlcnZpY2UuY2hlY2tfZmllbGRzKGZpZWxkcyxcImVycm9yX2NvbnRhaW5lclwiKSl7XG4gICAgICAgICAgICBpZigkc2NvcGUubmV3dXNlci5waWN0dXJlX3VybCE9bnVsbCAmJiAkc2NvcGUubmV3dXNlci5waWN0dXJlX3VybCE9XCJcIiAmJiBWYWxpZGF0aW9uU2VydmljZS5pc01vYmlsZURldmljZSgpKXtcbiAgICAgICAgICAgICAgQXV0aFNlcnZpY2UuY3JlYXRlX3VzZXIoJHNjb3BlLm5ld3VzZXIpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZW50X2xhYmVsXCIpLmlubmVySFRNTCA9IFwiRW52aWFkbzogMTAwJVwiO1xuICAgICAgICAgICAgICAgIGlmKEVycm9yU2VydmljZS5odHRwX2RhdGFfcmVzcG9uc2VfaXNfc3VjY2Vzc2Z1bChkYXRhLFwiZXJyb3JfY29udGFpbmVyXCIpKXtcbiAgICAgICAgICAgICAgICAgIGRhdGEgPSAkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgIFVzZXJTZXJ2aWNlLnNhdmVfdXNlcl9kYXRhKGRhdGEubmFtZSwgZGF0YS5lbWFpbCwgJHNjb3BlLm5ld3VzZXIucGFzc3dvcmQsIGRhdGEuaWRlbnRpdHlfZG9jdW1lbnQsIGRhdGEucGhvbmUsIGRhdGEucGljdHVyZV91cmwpO1xuICAgICAgICAgICAgICAgICAgVXNlclNlcnZpY2Uuc2F2ZV91c2VyX2RhdGEoZGF0YS5OYW1lLCAkc2NvcGUubmV3dXNlci5wYXNzd29yZCwgZGF0YS5QaG90bywgZGF0YS5TaG93TG9jYXRpb24sIGRhdGEuVWlkLCBkYXRhLkVzdGFkbywgZGF0YS5HZW5kZXIsIGRhdGEuSW50ZXJlc3RlZEluKTtcbiAgICAgICAgICAgICAgICAgIERCU2VydmljZS5zYXZlVXNlcihkYXRhLk5hbWUscGFzc3dvcmQsZGF0YS5QaG90byxkYXRhLlNob3dMb2NhdGlvbixkYXRhLlVpZCxkYXRhLkVzdGFkbywgZGF0YS5HZW5kZXIsIGRhdGEuSW50ZXJlc3RlZEluKTtcbiAgICAgICAgICAgICAgICAgIFNlbWFwaG9yZVNlcnZpY2UubWFrZUF2YWlsYWJsZUFnYWluKFwic3VibWl0LWZvcm1cIik7XG4gICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5jbG9zZV9lZGl0X3Byb2ZpbGVfbW9kYWwoKTtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5jaGVja191c2VyX2xvZ2dlZCgpO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgU2VtYXBob3JlU2VydmljZS5tYWtlQXZhaWxhYmxlQWdhaW4oXCJzdWJtaXQtZm9ybVwiKTtcbiAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lci1pbnNpZGUtbW9kYWxcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxmdW5jdGlvbihlcnIpe1xuICAgICAgICAgICAgICAgIFNlbWFwaG9yZVNlcnZpY2UubWFrZUF2YWlsYWJsZUFnYWluKFwic3VibWl0LWZvcm1cIik7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyLWluc2lkZS1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgQXV0aFNlcnZpY2UuY3JlYXRlX3VzZXIoJHNjb3BlLm5ld3VzZXIpLnRoZW4oZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICAgICAgICAgIGlmKEVycm9yU2VydmljZS5odHRwX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWwocmVzcCxcImVycm9yX2NvbnRhaW5lclwiKSl7XG4gICAgICAgICAgICAgICAgICBVc2VyU2VydmljZS5zYXZlX3VzZXJfZGF0YSgkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5OYW1lLCAkc2NvcGUubmV3dXNlci5wYXNzd29yZCwgJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuUGhvdG8sICRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLlNob3dMb2NhdGlvbiwgJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuVWlkLCAkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5Fc3RhZG8sICRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLkdlbmRlciwgJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuSW50ZXJlc3RlZEluKTtcbiAgICAgICAgICAgICAgICAgIERCU2VydmljZS5zYXZlVXNlcigkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5OYW1lLCRzY29wZS5uZXd1c2VyLnBhc3N3b3JkLCRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLlBob3RvLCRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLlNob3dMb2NhdGlvbiwkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5VaWQsJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkuRXN0YWRvLCAkc2NvcGUuZ2V0T2JqZWN0RGF0YUZyb21SZXNwb25zZShyZXNwKS5HZW5kZXIsICRzY29wZS5nZXRPYmplY3REYXRhRnJvbVJlc3BvbnNlKHJlc3ApLkludGVyZXN0ZWRJbik7XG4gICAgICAgICAgICAgICAgICAvLyRzY29wZS5zZXRfdXNlcl9waWN0dXJlKDEpO1xuICAgICAgICAgICAgICAgICAgU2VtYXBob3JlU2VydmljZS5tYWtlQXZhaWxhYmxlQWdhaW4oXCJzdWJtaXQtZm9ybVwiKTtcbiAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lci1pbnNpZGUtbW9kYWxcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLmNsb3NlX3NpZ25fdXBfbW9kYWwoKTtcbiAgICAgICAgICAgICAgICAgIHZhciBhbGVydFBvcHVwID0gJGlvbmljUG9wdXAuYWxlcnQoe1xuICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIlVzdWFyaW8gY3JlYWRvIGNvbiDDqXhpdG9cIixcbiAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJHNjb3BlLmdldE9iamVjdERhdGFGcm9tUmVzcG9uc2UocmVzcCkubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBhbGVydFBvcHVwLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAkc2NvcGUuY2hlY2tfdXNlcl9sb2dnZWQoKTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgIFNlbWFwaG9yZVNlcnZpY2UubWFrZUF2YWlsYWJsZUFnYWluKFwic3VibWl0LWZvcm1cIik7XG4gICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwaW5uZXItaW5zaWRlLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgICAgICAgICBTZW1hcGhvcmVTZXJ2aWNlLm1ha2VBdmFpbGFibGVBZ2FpbihcInN1Ym1pdC1mb3JtXCIpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Bpbm5lci1pbnNpZGUtbW9kYWxcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIEVycm9yU2VydmljZS5zaG93X2Vycm9yX21lc3NhZ2UoXCJlcnJvcl9jb250YWluZXJcIixyZXNwLnN0YXR1c1RleHQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvKn1lbHNle1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyLWluc2lkZS1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgfSovXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIFNlbWFwaG9yZVNlcnZpY2UubWFrZUF2YWlsYWJsZUFnYWluKFwic3VibWl0LWZvcm1cIik7XG4gICAgICAgICAgUG9wVXBTZXJ2aWNlLnNob3dfYWxlcnQoXCJTaW4gY29uZXhpw7NuIGEgaW50ZXJuZXRcIixcIlBhcmEgaW5pY2lhciByZWdpc3RyYXJzZSBkZWJlIGVzdGFyIGNvbmVjdGFkbyBhIGludGVybmV0XCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHNjb3BlLnNpZ25fdXBfb2sgPSBmdW5jdGlvbigpe1xuICAgICAgLy9jb25zb2xlLmxvZygkc2NvcGUubmV3dXNlcik7XG4gICAgICAkc2NvcGUuc2lnbl91cCgpO1xuICAgIH1cblxuICAgICRzY29wZS5jaGVja191c2VyX2xvZ2dlZCA9IGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgbmFtZSA9IFVzZXJTZXJ2aWNlLm5hbWU7XG4gICAgICBpZihuYW1lPT1udWxsKXtcbiAgICAgICAgICAvL1NpIEhheSB1biB1c3VhcmlvIGd1YXJkYWRvXG4gICAgICAgICAgdmFyIHVzZXIgPSBEQlNlcnZpY2UuZ2V0VXNlcigpO1xuICAgICAgICAgIHVzZXIudGhlbihmdW5jdGlvbiAoZG9jKSB7XG4gICAgICAgICAgICBpZihkb2MubmFtZSE9bnVsbCAmJiBkb2MubmFtZSE9XCJcIiAmJiBkb2MubmFtZSE9XCJ1bmRlZmluZWRcIil7XG4gICAgICAgICAgICAgICRzY29wZS5sb2dfaW5fYmFja2dyb3VuZChkb2MubmFtZSwgZG9jLnBhc3N3b3JkKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAkc2NvcGUuc2V0X3VzZXJfcGljdHVyZSgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAkc2NvcGUuc2V0X3VzZXJfcGljdHVyZSgwKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1lbHNle1xuICAgICAgICAvL0VzdMOhIGxvZ3VlYWRvXG4gICAgICAgIGlmKFVzZXJTZXJ2aWNlLnBpY3R1cmVfdXJsPT1udWxsIHx8IFVzZXJTZXJ2aWNlLnBpY3R1cmVfdXJsPT1cIlwiKXtcbiAgICAgICAgICAvL0VsIHVzdWFyaW8gbm8gdGllbmUgZm90byBkZWZpbmlkYVxuICAgICAgICAgICRzY29wZS5zZXRfdXNlcl9waWN0dXJlKDApO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAvL0VsIHVzdWFyaW8gdGllbmUgZm90b1xuICAgICAgICAgICRzY29wZS5zZXRfdXNlcl9waWN0dXJlKDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHNjb3BlLnNldF9vZmZsaW5lX3VzZXIgPSBmdW5jdGlvbigpe1xuICAgICAgdmFyIG5hbWUgPSBVc2VyU2VydmljZS5uYW1lO1xuICAgICAgaWYobmFtZT09bnVsbCl7XG4gICAgICAgICAgLy9TaSBIYXkgdW4gdXN1YXJpbyBndWFyZGFkb1xuICAgICAgICAgIHZhciB1c2VyID0gREJTZXJ2aWNlLmdldFVzZXIoKTtcbiAgICAgICAgICB1c2VyLnRoZW4oZnVuY3Rpb24gKGRvYykge1xuICAgICAgICAgICAgaWYoZG9jLm5hbWUhPW51bGwgJiYgZG9jLm5hbWUhPVwiXCIgJiYgZG9jLm5hbWUhPVwidW5kZWZpbmVkXCIpe1xuICAgICAgICAgICAgICBVc2VyU2VydmljZS5zYXZlX3VzZXJfZGF0YShkb2MubmFtZSwgZG9jLnBhc3N3b3JkLCBkb2MucGljdHVyZV91cmwsIGRvYy5zaG93X2xvY2F0aW9uKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAkc2NvcGUuc2V0X3VzZXJfcGljdHVyZSgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAkc2NvcGUuc2V0X3VzZXJfcGljdHVyZSgwKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1lbHNle1xuICAgICAgICAvL0VzdMOhIGxvZ3VlYWRvXG4gICAgICAgIGlmKFVzZXJTZXJ2aWNlLnBpY3R1cmVfdXJsPT1udWxsIHx8IFVzZXJTZXJ2aWNlLnBpY3R1cmVfdXJsPT1cIlwiKXtcbiAgICAgICAgICAvL0VsIHVzdWFyaW8gbm8gdGllbmUgZm90byBkZWZpbmlkYVxuICAgICAgICAgICRzY29wZS5zZXRfdXNlcl9waWN0dXJlKDApO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAvL0VsIHVzdWFyaW8gdGllbmUgZm90b1xuICAgICAgICAgICRzY29wZS5zZXRfdXNlcl9waWN0dXJlKDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG5cblxuICAgICRzY29wZS5zZXRfdXNlcl9waWN0dXJlID0gZnVuY3Rpb24oaGFzUGhvdG8pe1xuICAgICAgdmFyIHBpY3R1cmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVzZXJfcGljdHVyZVwiKTtcbiAgICAgIGlmKGhhc1Bob3RvPT0wKXtcbiAgICAgICAgLy9waWN0dXJlLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IFwidXJsKC4vaW1nL2ljb24tdXNlci1hbm9ueW1vdXMucG5nKVwiO1xuICAgICAgICAkc2NvcGUudXNlcl9jYWNoZWRfaW1hZ2U9XCIuL2ltZy9pY29uLXVzZXItYW5vbnltb3VzLnBuZ1wiO1xuICAgICAgfWVsc2V7XG4gICAgICAgIGlmKFVzZXJTZXJ2aWNlLnBpY3R1cmVfdXJsIT1udWxsICYmIFVzZXJTZXJ2aWNlLnBpY3R1cmVfdXJsIT1cIlwiKXtcbiAgICAgICAgICAvL2FsZXJ0KFVzZXJTZXJ2aWNlLnBpY3R1cmVfdXJsKTtcbiAgICAgICAgICAkc2NvcGUudXNlcl9jYWNoZWRfaW1hZ2U9VXNlclNlcnZpY2UucGljdHVyZV91cmw7XG4gICAgICAgICAgLy9waWN0dXJlLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IFwidXJsKFwiICsgVXNlclNlcnZpY2UucGljdHVyZV91cmwgKyBcIilcIjtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgLy9waWN0dXJlLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IFwidXJsKC4vaW1nL2ljb24tdXNlci1hbm9ueW1vdXMucG5nKVwiO1xuICAgICAgICAgICRzY29wZS51c2VyX2NhY2hlZF9pbWFnZT1cIi4vaW1nL2ljb24tdXNlci1hbm9ueW1vdXMucG5nXCI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH1cblxuICAgICRzY29wZS5maW5kX21lID0gZnVuY3Rpb24oKXtcbiAgICAgICAgJHNjb3BlLnNldF9hY3RpdmVfb3B0aW9uKFwiYnV0dG9uLWZpbmQtbWVcIik7XG4gICAgICAgICRzY29wZS5oaWRlX3NwZWNpYWxfZGl2cygpO1xuICAgICAgICB2YXIgcG9zT3B0aW9ucyA9IHt0aW1lb3V0OiAxMDAwMCwgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlfTtcbiAgICAgICAgJGNvcmRvdmFHZW9sb2NhdGlvblxuICAgICAgICAgIC5nZXRDdXJyZW50UG9zaXRpb24ocG9zT3B0aW9ucylcbiAgICAgICAgICAudGhlbihmdW5jdGlvbiAocG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubWFwLmNlbnRlci5sYXQgID0gcG9zaXRpb24uY29vcmRzLmxhdGl0dWRlO1xuICAgICAgICAgICAgICAgICRzY29wZS5tYXAuY2VudGVyLmxuZyA9IHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGU7XG4gICAgICAgICAgICAgICAgTG9jYXRpb25zU2VydmljZS5zYXZlX25ld19yZXBvcnRfcG9zaXRpb24ocG9zaXRpb24uY29vcmRzLmxhdGl0dWRlLHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUpO1xuICAgICAgICAgICAgICAgIGlmKENvbm5lY3Rpdml0eVNlcnZpY2UuaXNPbmxpbmUoKSl7XG4gICAgICAgICAgICAgICAgICAkc2NvcGUubWFwLmNlbnRlci56b29tID0gMTg7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAkc2NvcGUubWFwLmNlbnRlci56b29tID0gMTY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRzY29wZS5tYXAubWFya2Vycy5ub3cgPSB7XG4gICAgICAgICAgICAgICAgICBsYXQ6cG9zaXRpb24uY29vcmRzLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgbG5nOnBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUsXG4gICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIjxwIGFsaWduPSdjZW50ZXInPlRlIGVuY3VlbnRyYXMgYXF1w60gPGJyLz4gPGEgbmctY2xpY2s9J25ld19yZXBvcnQoMSk7Jz5JbmljaWFyIHJlcG9ydGUgZW4gdHUgcG9zaWNpw7NuIGFjdHVhbDwvYT48L3A+XCIsXG4gICAgICAgICAgICAgICAgICBmb2N1czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBnZXRNZXNzYWdlU2NvcGU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gJHNjb3BlOyB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyRzY29wZS5tYXAubWFya2Vycy5ub3cub3BlblBvcHVwKCk7XG4gICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgIC8vIGVycm9yXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIkxvY2F0aW9uIGVycm9yIVwiKTtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgLy9FcnJvclNlcnZpY2Uuc2hvd19lcnJvcl9tZXNzYWdlX3BvcHVwKFwiTm8gaGVtb3MgcG9kaWRvIGdlb2xvY2FsaXphcmxvLiDCv1RhbCB2ZXogb2x2aWTDsyBoYWJpbGl0YXIgbG9zIHNlcnZpY2lvcyBkZSBsb2NhbGl6YWNpw7NuIGVuIHN1IGRpc3Bvc2l0aXZvP1wiKVxuICAgICAgICAgICAgICAgICRzY29wZS5vcGVuQ291bmNpbFNlbGVjdG9yKCk7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgfTtcblxuICB9XG5cbl0pO1xuIiwicG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ0F1dGhTZXJ2aWNlJywgWyckaHR0cCcsICckY29yZG92YUZpbGVUcmFuc2ZlcicsICdDb25maWdTZXJ2aWNlJywnVmFsaWRhdGlvblNlcnZpY2UnLCBmdW5jdGlvbigkaHR0cCwgJGNvcmRvdmFGaWxlVHJhbnNmZXIsIENvbmZpZ1NlcnZpY2UsIFZhbGlkYXRpb25TZXJ2aWNlKSB7XG5cbiAgdmFyIGJhc2VVUkwgPSBDb25maWdTZXJ2aWNlLmJhc2VVUkwgKyBcIi9hcGkvXCI7XG5cbiAgcmV0dXJuIHtcbiAgICBsb2dfaW46IGZ1bmN0aW9uICh1c2VyLHBhc3N3b3JkKSB7XG4gICAgICAgIHZhciBib2R5ID0gJ3VzZXI9Jyt1c2VyKycmcGFzc3dvcmQ9JytwYXNzd29yZDtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoYmFzZVVSTCArICdsb2dpbicsIGJvZHkse3dpdGhDcmVkZW50aWFsczogdHJ1ZSwgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ319KTtcbiAgICB9LFxuXG4gICAgc2lnbl9vdXQ6IGZ1bmN0aW9uIChwYXNzd29yZCwgZW1haWwpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoYmFzZVVSTCArIFwic2lnbl9vdXRcIiwgeyB3aXRoQ3JlZGVudGlhbHM6IHRydWUsIHBhcmFtczogeyBwYXNzd29yZF9zaWduX2luOiBwYXNzd29yZCwgZW1haWw6IGVtYWlsIH0gfSk7XG4gICAgfSxcblxuICAgIGNyZWF0ZV91c2VyOiBmdW5jdGlvbiAodXNlck9iaikge1xuICAgICAgaWYodXNlck9iai5waWN0dXJlX3VybCAmJiBWYWxpZGF0aW9uU2VydmljZS5pc01vYmlsZURldmljZSgpKXtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICBmaWxlS2V5OiBcInBob3RvXCIsXG4gICAgICAgICAvL2ZpbGVOYW1lOiBmaWxlbmFtZSxcbiAgICAgICAgIC8vY2h1bmtlZE1vZGU6IGZhbHNlLFxuICAgICAgICAgLy9taW1lVHlwZTogXCJpbWFnZS9qcGdcIixcbiAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZSxcbiAgICAgICAgIHBhcmFtcyA6IHsgIHVzZXI6IHVzZXJPYmoudXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogdXNlck9iai5wYXNzd29yZCxcbiAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiB1c2VyT2JqLmVtYWlsLFxuICAgICAgICAgICAgICAgICAgICAgZ2VuZGVyOiB1c2VyT2JqLmdlbmRlcixcbiAgICAgICAgICAgICAgICAgICAgIGludGVyZXN0ZWQ6IHVzZXJPYmouaW50ZXJlc3RlZCxcbiAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogdXNlck9iai5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICBzaG93X2xvY2F0aW9uOiB1c2VyT2JqLnNob3dfbG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgdHJ1c3RBbGxIb3N0cyA9IHRydWU7XG4gICAgICAgIHJldHVybiAkY29yZG92YUZpbGVUcmFuc2Zlci51cGxvYWQoYmFzZVVSTCArIFwiY3JlYXRlX3VzZXJcIiwgdXNlck9iai5waWN0dXJlX3VybCwgb3B0aW9ucywgdHJ1c3RBbGxIb3N0cyk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgaWYodXNlck9iai5waWN0dXJlX3VybCl7XG4gICAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgIFx0Zm9ybURhdGEuYXBwZW5kKFwicGhvdG9cIiwgdXNlck9iai5waWN0dXJlX3VybCk7XG4gICAgICAgIFx0Zm9ybURhdGEuYXBwZW5kKFwidXNlclwiLCB1c2VyT2JqLnVzZXJuYW1lKTtcbiAgICAgICAgXHRmb3JtRGF0YS5hcHBlbmQoXCJwYXNzd29yZFwiLCB1c2VyT2JqLnBhc3N3b3JkKTtcbiAgICAgICAgXHRmb3JtRGF0YS5hcHBlbmQoXCJlbWFpbFwiLCB1c2VyT2JqLmVtYWlsKTtcbiAgICAgICAgXHRmb3JtRGF0YS5hcHBlbmQoXCJnZW5kZXJcIiwgdXNlck9iai5nZW5kZXIpO1xuICAgICAgICBcdGZvcm1EYXRhLmFwcGVuZChcImludGVyZXN0ZWRcIiwgdXNlck9iai5pbnRlcmVzdGVkKTtcbiAgICAgICAgXHRmb3JtRGF0YS5hcHBlbmQoXCJzdGF0dXNcIiwgdXNlck9iai5zdGF0dXMpO1xuICAgICAgICBcdGZvcm1EYXRhLmFwcGVuZChcInNob3dfbG9jYXRpb25cIiwgdXNlck9iai5zaG93X2xvY2F0aW9uKTtcbiAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdChiYXNlVVJMICsgJ2NyZWF0ZV91c2VyJywgZm9ybURhdGEsIHtcbiAgICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkIH0sXG4gICAgICAgICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGFuZ3VsYXIuaWRlbnRpdHlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgdmFyIGJvZHkgPSAndXNlcj0nK3VzZXJPYmoudXNlcm5hbWUrJyZwYXNzd29yZD0nK3VzZXJPYmoucGFzc3dvcmQrJyZlbWFpbD0nK3VzZXJPYmouZW1haWwrJyZnZW5kZXI9Jyt1c2VyT2JqLmdlbmRlcjtcbiAgICAgICAgICBib2R5ID0gYm9keSArJyZpbnRlcmVzdGVkPScrdXNlck9iai5pbnRlcmVzdGVkKycmc3RhdHVzPScrdXNlck9iai5zdGF0dXMrJyZzaG93X2xvY2F0aW9uPScrdXNlck9iai5zaG93X2xvY2F0aW9uO1xuICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KGJhc2VVUkwgKyAnY3JlYXRlX3VzZXInLCBib2R5LHt3aXRoQ3JlZGVudGlhbHM6IHRydWUsIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCd9fSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH0sXG5cbiAgICBwYXNzd29yZF9yZWNvdmVyeTogZnVuY3Rpb24gKGVtYWlsKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KGJhc2VVUkwgKyBcImZvcmdvdF9wYXNzd29yZFwiLCB7IHBhcmFtczogeyBsb2dpbl9lbWFpbDogZW1haWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIHBhc3N3b3JkX2NoYW5nZTogZnVuY3Rpb24gKGVtYWlsLG9sZFBhc3N3b3JkLG5ld1Bhc3N3b3JkLGNvbmZpcm1QYXNzd29yZCkge1xuXG4gICAgICB2YXIgYm9keSA9ICdlbWFpbD0nK2VtYWlsKycmcGFzc3dvcmRfc2lnbl9pbj0nK29sZFBhc3N3b3JkKycmbmV3X3Bhc3N3b3JkPScrbmV3UGFzc3dvcmQrJyZjb25maXJtPScrY29uZmlybVBhc3N3b3JkO1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoYmFzZVVSTCArICdjaGFuZ2VfcGFzc3dvcmQnLCBib2R5LHtoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnfX0pO1xuXG4gICAgfSxcblxuXG4gICAgZWRpdF91c2VyOiBmdW5jdGlvbiAodXNlck9iaikge1xuICAgICAgaWYodXNlck9iai5waWN0dXJlX3VybCAmJiBWYWxpZGF0aW9uU2VydmljZS5pc01vYmlsZURldmljZSgpKXtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICBmaWxlS2V5OiBcInBob3RvXCIsXG4gICAgICAgICAvL2ZpbGVOYW1lOiBmaWxlbmFtZSxcbiAgICAgICAgIC8vY2h1bmtlZE1vZGU6IGZhbHNlLFxuICAgICAgICAgLy9taW1lVHlwZTogXCJpbWFnZS9qcGdcIixcbiAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZSxcbiAgICAgICAgIHBhcmFtcyA6IHsgIHVzZXI6IHVzZXJPYmoudXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogdXNlck9iai5wYXNzd29yZCxcbiAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiB1c2VyT2JqLmVtYWlsLFxuICAgICAgICAgICAgICAgICAgICAgZ2VuZGVyOiB1c2VyT2JqLmdlbmRlcixcbiAgICAgICAgICAgICAgICAgICAgIGludGVyZXN0ZWQ6IHVzZXJPYmouaW50ZXJlc3RlZCxcbiAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogdXNlck9iai5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICBzaG93X2xvY2F0aW9uOiB1c2VyT2JqLnNob3dfbG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgdHJ1c3RBbGxIb3N0cyA9IHRydWU7XG4gICAgICAgIHJldHVybiAkY29yZG92YUZpbGVUcmFuc2Zlci51cGxvYWQoYmFzZVVSTCArIFwiZWRpdF9wcm9maWxlXCIsIHVzZXJPYmoucGljdHVyZV91cmwsIG9wdGlvbnMsIHRydXN0QWxsSG9zdHMpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHZhciBib2R5ID0gJ3VzZXI9Jyt1c2VyT2JqLnVzZXJuYW1lKycmcGFzc3dvcmQ9Jyt1c2VyT2JqLnBhc3N3b3JkKycmZW1haWw9Jyt1c2VyT2JqLmVtYWlsKycmZ2VuZGVyPScrdXNlck9iai5nZW5kZXI7XG4gICAgICAgIGJvZHkgPSBib2R5ICsnJmludGVyZXN0ZWQ9Jyt1c2VyT2JqLmludGVyZXN0ZWQrJyZzdGF0dXM9Jyt1c2VyT2JqLnN0YXR1cysnJnNob3dfbG9jYXRpb249Jyt1c2VyT2JqLnNob3dfbG9jYXRpb247XG4gICAgICAgIGlmKHVzZXJPYmoucGljdHVyZV91cmwpe1xuICAgICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICBcdGZvcm1EYXRhLmFwcGVuZChcInBob3RvXCIsIHVzZXJPYmoucGljdHVyZV91cmwpO1xuICAgICAgICBcdGZvcm1EYXRhLmFwcGVuZChcInVzZXJcIiwgdXNlck9iai51c2VybmFtZSk7XG4gICAgICAgIFx0Zm9ybURhdGEuYXBwZW5kKFwicGFzc3dvcmRcIiwgdXNlck9iai5wYXNzd29yZCk7XG4gICAgICAgIFx0Zm9ybURhdGEuYXBwZW5kKFwiZW1haWxcIiwgdXNlck9iai5lbWFpbCk7XG4gICAgICAgIFx0Zm9ybURhdGEuYXBwZW5kKFwiZ2VuZGVyXCIsIHVzZXJPYmouZ2VuZGVyKTtcbiAgICAgICAgXHRmb3JtRGF0YS5hcHBlbmQoXCJpbnRlcmVzdGVkXCIsIHVzZXJPYmouaW50ZXJlc3RlZCk7XG4gICAgICAgIFx0Zm9ybURhdGEuYXBwZW5kKFwic3RhdHVzXCIsIHVzZXJPYmouc3RhdHVzKTtcbiAgICAgICAgXHRmb3JtRGF0YS5hcHBlbmQoXCJzaG93X2xvY2F0aW9uXCIsIHVzZXJPYmouc2hvd19sb2NhdGlvbik7XG4gICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoYmFzZVVSTCArICdlZGl0X3Byb2ZpbGUnLCBmb3JtRGF0YSwge1xuICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWQgfSxcbiAgICAgICAgICAgICAgdHJhbnNmb3JtUmVxdWVzdDogYW5ndWxhci5pZGVudGl0eVxuICAgICAgICAgIH0pO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdChiYXNlVVJMICsgJ2VkaXRfcHJvZmlsZScsIGJvZHkse3dpdGhDcmVkZW50aWFsczogdHJ1ZSwgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ319KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICB9O1xufV0pO1xuIiwicG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ0NrYW5TZXJ2aWNlJywgWyckaHR0cCcsICdsZWFmbGV0RGF0YScsJ0NvbmZpZ1NlcnZpY2UnLCBmdW5jdGlvbigkaHR0cCwgbGVhZmxldERhdGEsIENvbmZpZ1NlcnZpY2UpIHtcblxuICByZXR1cm4ge1xuICAgICAgbGFzdFBpbnNSZXNwb25zZTogbnVsbCxcblxuICAgICAgZ2V0QWxsUG9seWdvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KENvbmZpZ1NlcnZpY2UuY2thbkFsbFBvbHlnb25zVVJMLCB7IGhlYWRlcnM6IHsnQXV0aG9yaXphdGlvbic6ICdkN2U3OGI2ZS0zZWVkLTRkNjktODM4Ny1hYjAxOTYxMjFhNTEnfSB9KTtcbiAgICAgIH1cbiAgfVxuXG59XSk7XG4iLCJwbWJfaW0uc2VydmljZXMuZmFjdG9yeSgnQ29uZmlnU2VydmljZScsIFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkge1xuXG4gIHZhciBDb25maWdPYmogPSB7fTtcbiAgQ29uZmlnT2JqLmJhc2VVUkwgPSBcImh0dHA6Ly9iYWNrZW5kLnRlY2hvdXkudGhvci5kYXRhdXkub3JnXCI7XG4gIENvbmZpZ09iai5ja2FuQWxsUG9seWdvbnNVUkwgPSBcIi9ja2FuXCI7XG4gIC8qaWYoaW9uaWMuUGxhdGZvcm0uaXNXZWJWaWV3KCkpe1xuICAgIENvbmZpZ09iai5iYXNlVVJMID0gXCJodHRwOi8vYmFja2VuZC5lZHVjYWNpb24udGhvci5kYXRhdXkub3JnXCI7XG4gIH0gZWxzZSB7XG4gICAgQ29uZmlnT2JqLmJhc2VVUkwgPSBcIi9iYWNrZW5kXCI7XG4gIH0qL1xuICBDb25maWdPYmouQXBwTmFtZSA9IFwiVEVDSE9QQVJBTUlQQUlTIC0gVVJVR1VBWVwiO1xuXG5cbiAgcmV0dXJuIENvbmZpZ09iajtcblxufV0pO1xuIiwicG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ0Nvbm5lY3Rpdml0eVNlcnZpY2UnLCBbJyRjb3Jkb3ZhTmV0d29yaycsIGZ1bmN0aW9uKCRjb3Jkb3ZhTmV0d29yayl7XG5cbiAgcmV0dXJuIHtcbiAgICBpc09ubGluZTogZnVuY3Rpb24oKXtcbiAgICAgIC8qaWYoaW9uaWMuUGxhdGZvcm0uaXNXZWJWaWV3KCkpe1xuICAgICAgICByZXR1cm4gJGNvcmRvdmFOZXR3b3JrLmlzT25saW5lKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm9uTGluZTtcbiAgICAgICAgLy9yZXR1cm4gZmFsc2U7XG4gICAgICB9Ki9cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgaXNPZmZsaW5lOiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgLyppZihpb25pYy5QbGF0Zm9ybS5pc1dlYlZpZXcoKSl7XG4gICAgICAgIHJldHVybiAhJGNvcmRvdmFOZXR3b3JrLmlzT25saW5lKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gIW5hdmlnYXRvci5vbkxpbmU7XG4gICAgICB9Ki9cbiAgICB9XG4gIH1cbn1dKVxuIiwicG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ0RCU2VydmljZScsIFsnJHEnLCBmdW5jdGlvbigkcSkge1xuICAgdmFyIF9kYjtcblxuICAgcmV0dXJuIHtcbiAgICAgICBpbml0REI6IGluaXREQixcbiAgICAgICBzYXZlVXNlcjogc2F2ZVVzZXIsXG4gICAgICAgZ2V0VXNlcjogZ2V0VXNlcixcbiAgICAgICBlcmFzZVVzZXI6IGVyYXNlVXNlcixcbiAgICAgICBzYXZlUmVwb3J0OiBzYXZlUmVwb3J0LFxuICAgICAgIGdldFJlcG9ydDogZ2V0UmVwb3J0LFxuICAgICAgIGdldEFsbFJlcG9ydHM6IGdldEFsbFJlcG9ydHMsXG4gICAgICAgdXBkYXRlUmVwb3J0OiB1cGRhdGVSZXBvcnQsXG4gICAgICAgZGVsZXRlUmVwb3J0OiBkZWxldGVSZXBvcnQsXG4gICAgICAgZGVsZXRlR2l2ZW5SZXBvcnQ6IGRlbGV0ZUdpdmVuUmVwb3J0LFxuICAgICAgIGdldENhdGVnb3JpZXM6IGdldENhdGVnb3JpZXMsXG4gICAgICAgc2F2ZUNhdGVnb3JpZXM6IHNhdmVDYXRlZ29yaWVzXG4gICB9O1xuXG4gICBmdW5jdGlvbiBzYXZlVXNlcih1c2VyX25hbWUsIHVzZXJfcGFzc3dvcmQsIHVzZXJfcGljdHVyZV91cmwsc2hvd19sb2NhdGlvbiwgdWlkLCBzdGF0dXMsIGdlbmRlciwgaW50ZXJlc3RlZCkge1xuICAgICAgICAgdmFyIHVzZXIgPSB7XG4gICAgICAgICAgICBfaWQ6ICd1c2VyLWxvZ2dlZCcsXG4gICAgICAgICAgICBuYW1lOiB1c2VyX25hbWUsXG4gICAgICAgICAgICBwYXNzd29yZDogdXNlcl9wYXNzd29yZCxcbiAgICAgICAgICAgIHBpY3R1cmVfdXJsOiB1c2VyX3BpY3R1cmVfdXJsLFxuICAgICAgICAgICAgc2hvd19sb2NhdGlvbjogc2hvd19sb2NhdGlvbixcbiAgICAgICAgICAgIHVpZDogdWlkLFxuICAgICAgICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICAgICAgICBnZW5kZXI6IGdlbmRlcixcbiAgICAgICAgICAgIGludGVyZXN0ZWQ6IGludGVyZXN0ZWRcbiAgICAgICAgIH07XG4gICAgICAgICBnZXRVc2VyKCkudGhlbihmdW5jdGlvbiAoZG9jKSB7XG4gICAgICAgICAgIHVzZXIuX3JldiA9IGRvYy5fcmV2O1xuICAgICAgICAgICByZXR1cm4gX2RiLnB1dCh1c2VyKTtcbiAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgcmV0dXJuIF9kYi5wdXQodXNlcik7XG4gICAgICAgICB9KVxuICAgfTtcblxuICBmdW5jdGlvbiBnZXRVc2VyKCkge1xuICAgICByZXR1cm4gX2RiLmdldCgndXNlci1sb2dnZWQnKTtcbiAgfTtcblxuICBmdW5jdGlvbiBlcmFzZVVzZXIoKSB7XG4gICAgX2RiLmdldCgndXNlci1sb2dnZWQnKS50aGVuKGZ1bmN0aW9uKGRvYykge1xuICAgICAgcmV0dXJuIF9kYi5yZW1vdmUoZG9jKTtcbiAgICB9KTtcbiAgfVxuXG4gICBmdW5jdGlvbiBpbml0REIoKSB7XG4gICAgICAgLy8gQ3JlYXRlcyB0aGUgZGF0YWJhc2Ugb3Igb3BlbnMgaWYgaXQgYWxyZWFkeSBleGlzdHNcbiAgICAgICBfZGIgPSBuZXcgUG91Y2hEQigndG9tYW1vc3VuYV9sb2NhbF9kYicpO1xuICAgICAgIHJldHVybiBfZGI7XG4gICB9O1xuXG4gICBmdW5jdGlvbiBzYXZlUmVwb3J0KHJlcG9ydCkge1xuICAgICAgLy9uZXdfcmVwb3J0X2lkID0gXCJyZXBvcnRfXCIgKyBwb3VjaENvbGxhdGUudG9JbmRleGFibGVTdHJpbmcoW3JlcG9ydF0pO1xuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgdmFyIG5ld19yZXBvcnRfaWQgPSBcInJlcG9ydF9cIiArIGRhdGUuZ2V0RnVsbFllYXIoKSArIChkYXRlLmdldE1vbnRoKCkgKyAxKSArIGRhdGUuZ2V0RGF0ZSgpICsgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKTtcbiAgICAgIHJlcG9ydC5faWQgPSBuZXdfcmVwb3J0X2lkO1xuICAgICAgcmV0dXJuIF9kYi5wdXQocmVwb3J0KTtcbiAgIH07XG5cbiAgIGZ1bmN0aW9uIHVwZGF0ZVJlcG9ydChyZXBvcnQpIHtcbiAgICAgcmV0dXJuIF9kYi5wdXQocmVwb3J0KTtcbiAgfTtcblxuICAgZnVuY3Rpb24gZ2V0Q2F0ZWdvcmllcygpIHtcbiAgICAgcmV0dXJuIF9kYi5nZXQoJ2NhdGVnb3JpZXMtbGlzdCcpO1xuICAgfTtcblxuICAgZnVuY3Rpb24gc2F2ZUNhdGVnb3JpZXMoY2F0ZWdvcmllcykge1xuICAgICBnZXRDYXRlZ29yaWVzKCkudGhlbihmdW5jdGlvbiAoZG9jKSB7XG4gICAgICAgY2F0ZWdvcmllcy5fcmV2ID0gZG9jLl9yZXY7XG4gICAgICAgcmV0dXJuIF9kYi5wdXQoY2F0ZWdvcmllcyk7XG4gICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICBjYXRlZ29yaWVzLl9pZCA9IFwiY2F0ZWdvcmllcy1saXN0XCI7XG4gICAgICAgcmV0dXJuIF9kYi5wdXQoY2F0ZWdvcmllcyk7XG4gICAgIH0pXG4gICB9O1xuXG4gIGZ1bmN0aW9uIGdldFJlcG9ydChyZXBvcnRJZCkge1xuICAgICByZXR1cm4gX2RiLmdldChyZXBvcnRJZCk7XG4gIH07XG5cbiAgIGZ1bmN0aW9uIGdldEFsbFJlcG9ydHMoKSB7XG4gICAgIHJldHVybiBfZGIuYWxsRG9jcyh7XG4gICAgICBpbmNsdWRlX2RvY3M6IHRydWUsXG4gICAgICBhdHRhY2htZW50czogZmFsc2UsXG4gICAgICBzdGFydGtleTogJ3JlcG9ydF8nLFxuICAgICAgZW5ka2V5OiAncmVwb3J0X1xcdWZmZmYnXG4gICAgIH0pOy8qLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgLy8gaGFuZGxlIHJlc3VsdFxuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfSk7Ki9cbiAgfTtcblxuICBmdW5jdGlvbiBkZWxldGVSZXBvcnQocmVwb3J0X2lkKSB7XG4gICAgX2RiLmdldChyZXBvcnRfaWQpLnRoZW4oZnVuY3Rpb24oZG9jKSB7XG4gICAgICByZXR1cm4gX2RiLnJlbW92ZShkb2MpO1xuICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGRlbGV0ZUdpdmVuUmVwb3J0KHJlcG9ydCkge1xuICAgIHJldHVybiBfZGIucmVtb3ZlKHJlcG9ydCk7XG4gIH07XG5cbn1dKTtcbiIsInBtYl9pbS5zZXJ2aWNlcy5mYWN0b3J5KCdFcnJvclNlcnZpY2UnLCBbJyRodHRwJywnJGlvbmljUG9wdXAnLCAnVmFsaWRhdGlvblNlcnZpY2UnLCBmdW5jdGlvbigkaHR0cCwkaW9uaWNQb3B1cCxWYWxpZGF0aW9uU2VydmljZSkge1xuXG4gIHJldHVybiB7XG4gICAgaHR0cF9yZXNwb25zZV9pc19zdWNjZXNzZnVsOiBmdW5jdGlvbiAoanNvblJlc3VsdCwgZXJyb3JDb250YWluZXJJZCkge1xuICAgICAgdmFyIGVycm9yRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZXJyb3JDb250YWluZXJJZCk7XG4gICAgICBpZihqc29uUmVzdWx0LmRhdGEgJiYganNvblJlc3VsdC5kYXRhLlN0YXR1cz09XCJzdWNjZXNzXCIgfHwganNvblJlc3VsdC5TdGF0dXM9PVwic3VjY2Vzc1wiKXtcbiAgICAgICAgZXJyb3JEaXYuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1lbHNle1xuICAgICAgICBpZihqc29uUmVzdWx0LmRhdGEpe1xuICAgICAgICAgIGVycm9yRGl2LmlubmVySFRNTD1cIjxoMz5cIiArIGpzb25SZXN1bHQuZGF0YS5NZXNzYWdlICsgXCI8L2gzPlwiO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICBlcnJvckRpdi5pbm5lckhUTUw9XCI8aDM+XCIgKyBqc29uUmVzdWx0Lk1lc3NhZ2UgKyBcIjwvaDM+XCI7XG4gICAgICAgIH1cbiAgICAgICAgZXJyb3JEaXYuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBodHRwX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWxfYWpheDogZnVuY3Rpb24gKGpzb25SZXN1bHQpIHtcbiAgICAgIGlmKGpzb25SZXN1bHQuZGF0YS5yZXN1bHQ9PTApe1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGh0dHBfcmVzcG9uc2VfaXNfc3VjY2Vzc2Z1bF9wb3B1cDogZnVuY3Rpb24gKGpzb25SZXN1bHQpIHtcbiAgICAgIGlmKGpzb25SZXN1bHQuZGF0YS5yZXN1bHQ9PTApe1xuICAgICAgICB2YXIgYWxlcnRQb3B1cCA9ICRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgIHRpdGxlOiBcIkVycm9yXCIsXG4gICAgICAgICB0ZW1wbGF0ZToganNvblJlc3VsdC5kYXRhLm1lc3NhZ2VcbiAgICAgICAgfSk7XG4gICAgICAgIGFsZXJ0UG9wdXAudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGh0dHBfZGF0YV9yZXNwb25zZV9pc19zdWNjZXNzZnVsOiBmdW5jdGlvbiAoZGF0YSwgZXJyb3JDb250YWluZXJJZCkge1xuICAgICAgdmFyIGVycm9yRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZXJyb3JDb250YWluZXJJZCk7XG4gICAgICBpZihkYXRhLlN0YXR1cyE9J3N1Y2Nlc3MnKXtcbiAgICAgICAgZXJyb3JEaXYuaW5uZXJIVE1MPVwiPGgzPlwiICsgZGF0YS5NZXNzYWdlICsgXCI8L2gzPlwiO1xuICAgICAgICBlcnJvckRpdi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgZXJyb3JEaXYuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgaHR0cF9kYXRhX3Jlc3BvbnNlX2lzX3N1Y2Nlc3NmdWxfYWpheDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGlmKGRhdGEucmVzdWx0PT0wKXtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBzaG93X2Vycm9yX21lc3NhZ2U6IGZ1bmN0aW9uIChlcnJvckNvbnRhaW5lcklkLCBtZXNzYWdlKSB7XG4gICAgICAgIHZhciBlcnJvckRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVycm9yQ29udGFpbmVySWQpO1xuICAgICAgICBlcnJvckRpdi5pbm5lckhUTUw9XCI8aDM+XCIgKyBtZXNzYWdlICsgXCI8L2gzPlwiO1xuICAgICAgICBlcnJvckRpdi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIHNob3dfZXJyb3JfbWVzc2FnZV9wb3B1cDogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIGFsZXJ0UG9wdXAgPSAkaW9uaWNQb3B1cC5hbGVydCh7XG4gICAgICAgICB0aXRsZTogXCJFcnJvclwiLFxuICAgICAgICAgdGVtcGxhdGU6IG1lc3NhZ2VcbiAgICAgICAgfSk7XG4gICAgICAgIGFsZXJ0UG9wdXAudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGNoZWNrX2ZpZWxkczogZnVuY3Rpb24gKGZpZWxkcywgZXJyb3JDb250YWluZXJJZCkge1xuICAgICAgdmFyIGVycm9ycyA9IFwiXCI7XG4gICAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihmaWVsZCkge1xuICAgICAgICBpZihmaWVsZC50eXBlPT1cIm5vdE51bGxcIil7XG4gICAgICAgICAgaWYoIVZhbGlkYXRpb25TZXJ2aWNlLnZhbGlkYXRlX25vdF9lbXB0eShmaWVsZC52YWx1ZSkpe1xuICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzICsgJzxoMz4tIEVsIGNhbXBvIFwiJyArIGZpZWxkLm5hbWUgKyAnXCIgbm8gcHVlZGUgZXN0YXIgdmFjw61vLjwvaDM+JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYoZmllbGQudHlwZT09XCJlbWFpbFwiKXtcbiAgICAgICAgICBpZighVmFsaWRhdGlvblNlcnZpY2UudmFsaWRhdGVfZW1haWwoZmllbGQudmFsdWUpKXtcbiAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyArICc8aDM+LSBFbCBjYW1wbyBcIicgKyBmaWVsZC5uYW1lICsgJ1wiIG5vIGVzIHVuYSBkaXJlY2Npw7NuIGRlIGNvcnJlbyB2w6FsaWRhLjwvaDM+JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYoZmllbGQudHlwZT09XCJpZGRvY191eVwiKXtcbiAgICAgICAgICBpZighVmFsaWRhdGlvblNlcnZpY2UudmFsaWRhdGVfaWRkb2NfdXkoZmllbGQudmFsdWUpKXtcbiAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyArICc8aDM+LSBFbCBjYW1wbyBcIicgKyBmaWVsZC5uYW1lICsgJ1wiIG5vIGVzIHVuYSBjw6lkdWxhIHVydWd1YXlhIHbDoWxpZGEuPC9oMz4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZihmaWVsZC50eXBlPT1cInR3b193b3Jkc1wiKXtcbiAgICAgICAgICBpZighVmFsaWRhdGlvblNlcnZpY2UudmFsaWRhdGVfdHdvX3dvcmRzKGZpZWxkLnZhbHVlKSl7XG4gICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgKyAnPGgzPi0gRWwgY2FtcG8gXCInICsgZmllbGQubmFtZSArICdcIiBkZWJlIGNvbnRlbmVyIGFsIG1lbm9zIGRvcyBwYWxhYnJhcy48L2gzPic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKGZpZWxkLnR5cGU9PVwiZXF1YWxzVG9cIil7XG4gICAgICAgICAgaWYoIVZhbGlkYXRpb25TZXJ2aWNlLnZhbGlkYXRlX2VxdWFsc1RvKGZpZWxkLnZhbHVlLCBmaWVsZC5zZWNvbmRWYWx1ZSkpe1xuICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzICsgJzxoMz4tIExvcyBjYW1wb3MgXCInICsgZmllbGQubmFtZSArICdcIiBubyBjb2luY2lkZW4uPC9oMz4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZihlcnJvcnMgPT1cIlwiKXtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgdmFyIGVycm9yRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZXJyb3JDb250YWluZXJJZCk7XG4gICAgICAgIGVycm9yRGl2LmlubmVySFRNTD0gZXJyb3JzO1xuICAgICAgICBlcnJvckRpdi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgfTtcbn1dKTtcbiIsInBtYl9pbS5zZXJ2aWNlcy5mYWN0b3J5KCdMb2FkZXInLCBbJyRpb25pY0xvYWRpbmcnLCAnJHRpbWVvdXQnLCckaW9uaWNQb3B1cCcsZnVuY3Rpb24oJGlvbmljTG9hZGluZywkdGltZW91dCwkaW9uaWNQb3B1cCkge1xuXG4gIHZhciBMT0FERVJBUEkgPSB7XG5cbiAgICBzaG93TG9hZGluZzogZnVuY3Rpb24odGV4dCkge1xuICAgICAgdGV4dCA9IHRleHQgfHwgJ0xvYWRpbmcuLi4nO1xuICAgICAgJGlvbmljTG9hZGluZy5zaG93KHtcbiAgICAgICAgdGVtcGxhdGU6IHRleHRcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBoaWRlTG9hZGluZzogZnVuY3Rpb24oKSB7XG4gICAgICAkaW9uaWNMb2FkaW5nLmhpZGUoKTtcbiAgICB9LFxuXG4gICAgdG9nZ2xlTG9hZGluZ1dpdGhNZXNzYWdlOiBmdW5jdGlvbih0ZXh0LCB0aW1lb3V0KSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIHNlbGYuc2hvd0xvYWRpbmcodGV4dCk7XG5cbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLmhpZGVMb2FkaW5nKCk7XG4gICAgICB9LCB0aW1lb3V0IHx8IDMwMDApO1xuICAgIH0sXG5cbiAgICBjb25maXJtUG9wdXA6ZnVuY3Rpb24odGl0bGUsdGV4dCl7XG4gICAgICB2YXIgY29uZmlybVBvcHVwID0gJGlvbmljUG9wdXAuY29uZmlybSh7XG4gICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgdGVtcGxhdGU6IHRleHRcbiAgIH0pO1xuICAgcmV0dXJuIGNvbmZpcm1Qb3B1cDtcbiB9LFxuXG5cbiAgICBzaG93QWxlcnQ6ZnVuY3Rpb24oX3RpdGxlLF90ZW1wbGF0ZSkge1xuICAgICAgdmFyIGFsZXJ0UG9wdXAgPSAkaW9uaWNQb3B1cC5hbGVydCh7XG4gICAgICAgIHRpdGxlOiBfdGl0bGUsXG4gICAgICAgIHRlbXBsYXRlOiBfdGVtcGxhdGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFsZXJ0UG9wdXA7XG4gfVxuXG4gIH07XG4gIHJldHVybiBMT0FERVJBUEk7XG59XSk7XG4iLCJwbWJfaW0uc2VydmljZXMuZmFjdG9yeSgnTG9jYXRpb25zU2VydmljZScsIFsgZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGxvY2F0aW9uc09iaiA9IHt9O1xuICBsb2NhdGlvbnNPYmouaW5pdGlhbF9sYXQgPSBcIlwiO1xuICBsb2NhdGlvbnNPYmouaW5pdGlhbF9sbmcgPSBcIlwiO1xuICBsb2NhdGlvbnNPYmoubGFzdF91c2VyX2xhdCA9IFwiXCI7XG4gIGxvY2F0aW9uc09iai5sYXN0X3VzZXJfbG5nID0gXCJcIjtcbiAgbG9jYXRpb25zT2JqLmNvdW5jaWxfbW9kYWwgPSBudWxsO1xuICBsb2NhdGlvbnNPYmouc2VsZWN0ZWRfY291bmNpbCA9IG51bGw7XG5cbiAgbG9jYXRpb25zT2JqLnNlbGVjdENvdW5jaWwgPSBmdW5jdGlvbihjb3VuY2lsTmFtZSkge1xuICAgIGxvY2F0aW9uc09iai5zZWxlY3RlZF9jb3VuY2lsID0gIGNvdW5jaWxOYW1lO1xuICB9XG5cbiAgbG9jYXRpb25zT2JqLnNhdmVfaW5pdGlhbF9wb3NpdGlvbiA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgbG9jYXRpb25zT2JqLmluaXRpYWxfbGF0ID0gIHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZTtcbiAgICBsb2NhdGlvbnNPYmouaW5pdGlhbF9sbmcgPSAgcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZTtcbiAgfVxuXG4gIGxvY2F0aW9uc09iai5zYXZlX2xhc3RfdXNlcl9wb3NpdGlvbiA9IGZ1bmN0aW9uKGxhdCxsbmcpe1xuICAgIGxvY2F0aW9uc09iai5sYXN0X3VzZXJfbGF0ID0gbGF0O1xuICAgIGxvY2F0aW9uc09iai5sYXN0X3VzZXJfbG5nID0gbG5nO1xuICB9XG5cbiAgbG9jYXRpb25zT2JqLnNhdmVkTG9jYXRpb25zID0gW107XG5cbiAgcmV0dXJuIGxvY2F0aW9uc09iajtcblxufV0pO1xuIiwiIC8vcG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ01hcFNlcnZpY2UnLCBbIGZ1bmN0aW9uKCkge1xuIHBtYl9pbS5zZXJ2aWNlcy5mYWN0b3J5KCdNYXBTZXJ2aWNlJywgWydsZWFmbGV0RGF0YScsICckY29tcGlsZScsIGZ1bmN0aW9uKGxlYWZsZXREYXRhLCAkY29tcGlsZSkge1xuXG4gICAvL0RlZmluaWNpb24gZGUgbGEgcHJveWVjY2Npb24gVVRNIDIxIHNcbiAgIHByb2o0LmRlZnMoJ0VQU0c6MzI3MjEnLCAnK3Byb2o9dXRtICt6b25lPTIxICtzb3V0aCArZWxscHM9V0dTODQgK2RhdHVtPVdHUzg0ICt1bml0cz1tICtub19kZWZzJyk7XG5cblxuICAgdmFyIG1hcFNlcnZpY2UgPSB7fTtcblxuICAgbWFwU2VydmljZS5nb1RvUGxhY2UgPSBmdW5jdGlvbihuYW1lLGxhdCxsb24sc2NvcGUpIHtcbiAgICB2YXIgX2dlb0pzb24gPSB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVDb2xsZWN0aW9uXCIsXG4gICAgICAgICAgICAgIFwiY3JzXCI6IHsgXCJ0eXBlXCI6IFwibmFtZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogJ3VybjpvZ2M6ZGVmOmNyczpFUFNHOjozMjcyMSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJmZWF0dXJlc1wiOiBbXG4gICAgICAgICAgICAgICAgeyBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gICAgICAgICAgICAgICAgXCJnZW9tZXRyeVwiOntcbiAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6XCJQb2ludFwiLFxuICAgICAgICAgICAgICAgICAgICAgICBcImNvb3JkaW5hdGVzXCI6W2xhdCxsb25dXG4gICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInByb3BlcnRpZXNcIjp7XG4gICAgICAgICAgICAgICAgICAgICAgXCJub21icmVcIjogbmFtZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9O1xuICAgICBsZWFmbGV0RGF0YS5nZXRNYXAoKS50aGVuKGZ1bmN0aW9uKG1hcCkge1xuICAgICAgdmFyIF9sYXRsbmc7XG4gICAgICAgdmFyIGxheWVyID0gTC5Qcm9qLmdlb0pzb24oX2dlb0pzb24sIHtcbiAgICAgICAgICdwb2ludFRvTGF5ZXInOiBmdW5jdGlvbihmZWF0dXJlLCBsYXRsbmcpIHtcbiAgICAgICAgICAgX2xhdGxuZyA9IGxhdGxuZztcbiAgICAgICAgICAgdmFyIGh0bWxQb3BVcCA9IFwiPHAgYWxpZ249J2NlbnRlcic+XCIrZmVhdHVyZS5wcm9wZXJ0aWVzLm5vbWJyZStcIiA8YnIvPiA8YSBuZy1jbGljaz0nbmV3X3JlcG9ydF9mcm9tX2xhdGxvbihcIitfbGF0bG5nLmxhdCtcIixcIitfbGF0bG5nLmxuZytcIik7Jz5JbmljaWFyIHJlcG9ydGUgYXF1w608L2E+PC9wPlwiO1xuICAgICAgICAgICB2YXIgY29tcGlsZWQgPSAkY29tcGlsZShodG1sUG9wVXApKHNjb3BlKTtcbiAgICAgICAgICAgcmV0dXJuIEwubWFya2VyKGxhdGxuZykuYmluZFBvcHVwKGNvbXBpbGVkWzBdKTtcbiAgICAgICAgIH1cbiAgICAgICB9KTtcblxuICAgICAgIGxheWVyLmFkZFRvKG1hcCk7XG4gICAgICAgbWFwLnNldFZpZXcoX2xhdGxuZywgMTgpO1xuICAgICAgIGxheWVyLm9wZW5Qb3B1cCgpO1xuICAgICB9KTtcbiAgIH07XG5cbiAgbWFwU2VydmljZS5jZW50ZXJNYXBPbkNvb3JkcyA9IGZ1bmN0aW9uKGxhdCxsbmcsem9vbSkge1xuICAgICBsZWFmbGV0RGF0YS5nZXRNYXAoKS50aGVuKGZ1bmN0aW9uKG1hcCkge1xuICAgICAgICBtYXAuc2V0VmlldyhuZXcgTC5MYXRMbmcobGF0LCBsbmcpLHpvb20pO1xuICAgICAgIH0pO1xuICAgICB9XG5cbiAgIHJldHVybiBtYXBTZXJ2aWNlO1xuXG4gfV0pO1xuIiwicG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ01vZGFsU2VydmljZScsIFsgZnVuY3Rpb24oKSB7XG5cbiAgdmFyIG1vZGFsT0JKID0ge307XG4gIG1vZGFsT0JKLmFjdGl2ZU1vZGFsID0gbnVsbDtcblxuICBtb2RhbE9CSi5jaGVja05vTW9kYWxJc09wZW4gPSBmdW5jdGlvbigpIHtcbiAgICBpZihtb2RhbE9CSi5hY3RpdmVNb2RhbCl7XG4gICAgICBtb2RhbE9CSi5hY3RpdmVNb2RhbC5oaWRlKCk7XG4gICAgICBtb2RhbE9CSi5hY3RpdmVNb2RhbC5yZW1vdmUoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbW9kYWxPQko7XG5cbn1dKTtcbiIsInBtYl9pbS5zZXJ2aWNlcy5mYWN0b3J5KCdQaW5TZXJ2aWNlJywgWyckaHR0cCcsICdsZWFmbGV0RGF0YScsJ0NvbmZpZ1NlcnZpY2UnLCBmdW5jdGlvbigkaHR0cCwgbGVhZmxldERhdGEsIENvbmZpZ1NlcnZpY2UpIHtcblxuICB2YXIgcGluc1VSTCA9IENvbmZpZ1NlcnZpY2UuYmFzZVVSTCArIFwiL3NpdGVzL3RvbWFtb3NfdW5hL2ZpbGVzL2pzb24vdXNlcnNfZ2VvLmpzb25cIjtcbiAgdmFyIGFwaVVSTCA9IENvbmZpZ1NlcnZpY2UuYmFzZVVSTCArIFwiL2FwaS9cIlxuXG4gIHByb2o0LmRlZnMoJ0VQU0c6MzI3MjEnLCAnK3Byb2o9dXRtICt6b25lPTIxICtzb3V0aCArZWxscHM9V0dTODQgK2RhdHVtPVdHUzg0ICt1bml0cz1tICtub19kZWZzJyk7XG5cblxuXG4vKipcbiAgICogQ29uc3RydWN0b3IsIHdpdGggY2xhc3MgbmFtZVxuICAgKi9cbiAgZnVuY3Rpb24gUGluKF9kYXRhKSB7XG4gICAgYW5ndWxhci5leHRlbmQodGhpcywgX2RhdGEpO1xuICB9XG5cbiAgUGluLmNvbnZlcnRMYXRMb25nUHJvaiA9IGZ1bmN0aW9uKGxhdCxsb24sc2NvcGUpIHtcbiAgIHZhciBfZ2VvSnNvbiA9IHtcbiAgICAgICAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlQ29sbGVjdGlvblwiLFxuICAgICAgICAgICAgIFwiY3JzXCI6IHsgXCJ0eXBlXCI6IFwibmFtZVwiLFxuICAgICAgICAgICAgICAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6ICd1cm46b2djOmRlZjpjcnM6RVBTRzo6MzI3MjEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgIFwiZmVhdHVyZXNcIjogW1xuICAgICAgICAgICAgICAgeyBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gICAgICAgICAgICAgICBcImdlb21ldHJ5XCI6e1xuICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOlwiUG9pbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICBcImNvb3JkaW5hdGVzXCI6W2xhdCxsb25dXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgXCJwcm9wZXJ0aWVzXCI6e1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBdXG4gICAgICAgICAgIH07XG4gICAgICB2YXIgX2xhdGxuZztcbiAgICAgIHZhciBwb2ludCA9IEwuUHJvai5nZW9Kc29uKF9nZW9Kc29uLCB7XG4gICAgICAgICdwb2ludFRvTGF5ZXInOiBmdW5jdGlvbihmZWF0dXJlLCBsYXRsbmcpIHtcbiAgICAgICAgICBfbGF0bG5nID0gbGF0bG5nO1xuICAgICAgICAgIHJldHVybiBsYXRsbmc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIHJldHVybiBfbGF0bG5nO1xuICB9O1xuXG5cbiAgUGluLmdldEFsbCA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuICRodHRwLmdldChwaW5zVVJMLCB7Y2FjaGU6IGZhbHNlLCBwYXJhbXM6IHtoYXNoX2lkOk1hdGgucmFuZG9tKCl9fSk7XG4gIH1cblxuICBQaW4uc2VuZFVzZXJMb2NhdGlvbiA9IGZ1bmN0aW9uKGxhdGl0dWRlLGxvbmdpdHVkZSx1c2VybmFtZSxwYXNzd29yZCx1aWQpe1xuICAgIHZhciBib2R5ID0gJ3VzZXI9Jyt1c2VybmFtZSsnJnBhc3N3b3JkPScrcGFzc3dvcmQrJyZsYXQ9JytsYXRpdHVkZSsnJmxvbj0nK2xvbmdpdHVkZStcIiZ1aWQ9XCIrdWlkO1xuICAgIHJldHVybiAkaHR0cC5wb3N0KGFwaVVSTCArICdzZW5kX3VzZXJfcG9zaXRpb24nLCBib2R5LHt3aXRoQ3JlZGVudGlhbHM6IHRydWUsIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCd9fSk7XG5cbiAgfVxuXG5cbiAgICBQaW4uX2FsbCA9IFtdO1xuICAgIFBpbi5jdXJyZW50ID0ge307XG4gICAgUGluLmxhc3RQaW5zUmVzcG9uc2UgPSBudWxsO1xuXG5cblxuXG4gICAgLyoqXG4gICAgICogU3RhdGljIG1ldGhvZCwgYXNzaWduZWQgdG8gY2xhc3NcbiAgICAgKiBJbnN0YW5jZSAoJ3RoaXMnKSBpcyBub3QgYXZhaWxhYmxlIGluIHN0YXRpYyBjb250ZXh0XG4gICAgICovXG4gICAgUGluLmJ1aWxkID0gZnVuY3Rpb24oX2RhdGEpIHtcblxuICAgICAgcmV0dXJuIG5ldyBQaW4oXG4gICAgICAgIF9kYXRhXG4gICAgICApO1xuICAgIH07XG5cbiAgICBQaW4ucHJvdG90eXBlLnNldExhdExuZyA9IGZ1bmN0aW9uIChsYXRsbmcpIHtcblxuICAgICAgdGhpcy5sYXQgPSBsYXRsbmcubGF0O1xuICAgICAgdGhpcy5sb24gPSBsYXRsbmcubG5nO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gICAgICovXG4gICAgcmV0dXJuIFBpbjtcblxufV0pO1xuIiwicG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ1BvcFVwU2VydmljZScsIFsnJGlvbmljUG9wdXAnLCdWYWxpZGF0aW9uU2VydmljZScsIGZ1bmN0aW9uKCRpb25pY1BvcHVwLFZhbGlkYXRpb25TZXJ2aWNlKSB7XG5cbiAgcmV0dXJuIHtcbiAgICBzaG93X2FsZXJ0OiBmdW5jdGlvbiAoYWxlcnRfdGl0bGUsYWxlcnRfbWVzc2FnZSkge1xuICAgICAgICB2YXIgYWxlcnRQb3B1cCA9ICRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgIHRpdGxlOiBhbGVydF90aXRsZSxcbiAgICAgICAgIHRlbXBsYXRlOiBhbGVydF9tZXNzYWdlXG4gICAgICAgIH0pO1xuICAgICAgICBhbGVydFBvcHVwLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICBjb25maXJtUG9wdXA6IGZ1bmN0aW9uKHRpdGxlLHRleHQpe1xuICAgICB2YXIgY29uZmlybVBvcHVwID0gJGlvbmljUG9wdXAuY29uZmlybSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICByZXR1cm4gY29uZmlybVBvcHVwO1xuICAgfSxcblxuICAgYXNrRm9yT25lVmFsdWVQb3BVcDogZnVuY3Rpb24oc2NvcGUsdGl0bGUsdGV4dCxmaWVsZF9uYW1lLHZhbGlkYXRpb25UeXBlKXtcbiAgICAgICRzY29wZSA9IHNjb3BlO1xuICAgICAgdmFyIG15UG9wdXAgPSAkaW9uaWNQb3B1cC5zaG93KHtcbiAgICAgIHRlbXBsYXRlOiBmaWVsZF9uYW1lICsgJzogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJvbmVfdmFsdWVfcG9wdXBcIj48ZGl2IGlkPVwiZXJyb3JfY29udGFpbmVyX2luc2lkZVwiPjwvZGl2PicsXG4gICAgICB0aXRsZTogdGl0bGUsXG4gICAgICBzdWJUaXRsZTogdGV4dCxcbiAgICAgIHNjb3BlOiAkc2NvcGUsXG4gICAgICBidXR0b25zOiBbXG4gICAgICAgIHsgdGV4dDogJ0NhbmNlbGFyJyB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGV4dDogJzxiPkVudmlhcjwvYj4nLFxuICAgICAgICAgIHR5cGU6ICdidXR0b24tcG9zaXRpdmUnLFxuICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3JzID0gXCJcIjtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib25lX3ZhbHVlX3BvcHVwXCIpLnZhbHVlO1xuICAgICAgICAgICAgaWYodmFsaWRhdGlvblR5cGU9PVwibm90TnVsbFwiKXtcbiAgICAgICAgICAgICAgaWYoIVZhbGlkYXRpb25TZXJ2aWNlLnZhbGlkYXRlX25vdF9lbXB0eSh2YWx1ZSkpe1xuICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyArICc8aDM+LSBFbCBjYW1wbyBcIicgKyBmaWVsZF9uYW1lICsgJ1wiIG5vIHB1ZWRlIGVzdGFyIHZhY8Otby48L2gzPic7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHZhbGlkYXRpb25UeXBlPT1cImVtYWlsXCIpe1xuICAgICAgICAgICAgICBpZighVmFsaWRhdGlvblNlcnZpY2UudmFsaWRhdGVfZW1haWwodmFsdWUpKXtcbiAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgKyAnPGgzPi0gRWwgY2FtcG8gXCInICsgZmllbGRfbmFtZSArICdcIiBubyBlcyB1bmEgZGlyZWNjacOzbiBkZSBjb3JyZW8gdsOhbGlkYS48L2gzPic7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHZhbGlkYXRpb25UeXBlPT1cImlkZG9jX3V5XCIpe1xuICAgICAgICAgICAgICBpZighVmFsaWRhdGlvblNlcnZpY2UudmFsaWRhdGVfaWRkb2NfdXkodmFsdWUpKXtcbiAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgKyAnPGgzPi0gRWwgY2FtcG8gXCInICsgZmllbGRfbmFtZSArICdcIiBubyBlcyB1bmEgY8OpZHVsYSB1cnVndWF5YSB2w6FsaWRhLjwvaDM+JztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYodmFsaWRhdGlvblR5cGU9PVwidHdvX3dvcmRzXCIpe1xuICAgICAgICAgICAgICBpZighVmFsaWRhdGlvblNlcnZpY2UudmFsaWRhdGVfdHdvX3dvcmRzKHZhbHVlKSl7XG4gICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzICsgJzxoMz4tIEVsIGNhbXBvIFwiJyArIGZpZWxkX25hbWUgKyAnXCIgZGViZSBjb250ZW5lciBhbCBtZW5vcyBkb3MgcGFsYWJyYXMuPC9oMz4nO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihlcnJvcnMhPVwiXCIpe1xuICAgICAgICAgICAgICB2YXIgZXJyb3JEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVycm9yX2NvbnRhaW5lcl9pbnNpZGVcIik7XG4gICAgICAgICAgICAgIGVycm9yRGl2LmlubmVySFRNTD0gZXJyb3JzO1xuICAgICAgICAgICAgICBlcnJvckRpdi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgICAvL2Rvbid0IGFsbG93IHRoZSB1c2VyIHRvIGNsb3NlIHVubGVzcyBoZSBlbnRlcnMgd2lmaSBwYXNzd29yZFxuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSk7XG4gICAgcmV0dXJuIG15UG9wdXA7XG4gICB9XG5cblxuICB9O1xufV0pO1xuIiwicG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ1NlbWFwaG9yZVNlcnZpY2UnLCBbZnVuY3Rpb24oKSB7XG5cbiAgdmFyIHNlbWFwaG9yZU9iaiA9IHt9O1xuICBzZW1hcGhvcmVPYmouc2VtYXBob3JlcyA9IG5ldyBBcnJheSgpO1xuICBzZW1hcGhvcmVPYmouc2VtYXBob3Jlc1snb3Blbi1tb2RhbCddID0gXCJhdmFpbGFibGVcIjtcbiAgc2VtYXBob3JlT2JqLnNlbWFwaG9yZXNbJ3N1Ym1pdC1mb3JtJ10gPSBcImF2YWlsYWJsZVwiO1xuICBzZW1hcGhvcmVPYmouc2VtYXBob3Jlc1snc3VibWl0LWxvY2F0aW9uJ10gPSBcImF2YWlsYWJsZVwiO1xuICBzZW1hcGhvcmVPYmouc2VtYXBob3Jlc1snY2FuX3RhbGsnXSA9IFwiYXZhaWxhYmxlXCI7XG5cblxuXG5cbiAgc2VtYXBob3JlT2JqLnRha2VJZkF2YWlsYWJsZSA9IGZ1bmN0aW9uKHNlbWFwaG9yZUlkKSB7XG4gICAgLy9jb25zb2xlLmxvZyhzZW1hcGhvcmVJZCArIFwiOlwiICsgc2VtYXBob3JlT2JqLnNlbWFwaG9yZXNbc2VtYXBob3JlSWRdKTtcbiAgICBpZihzZW1hcGhvcmVPYmouc2VtYXBob3Jlc1tzZW1hcGhvcmVJZF09PVwiYXZhaWxhYmxlXCIpe1xuICAgICAgICBzZW1hcGhvcmVPYmouc2VtYXBob3Jlc1tzZW1hcGhvcmVJZF0gPSBcIm9jY3VwaWVkXCI7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1lbHNle1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHNlbWFwaG9yZU9iai5tYWtlQXZhaWxhYmxlQWdhaW4gPSBmdW5jdGlvbihzZW1hcGhvcmVJZCkge1xuICAgIGlmKHNlbWFwaG9yZU9iai5zZW1hcGhvcmVzW3NlbWFwaG9yZUlkXT09XCJvY2N1cGllZFwiKXtcbiAgICAgICAgc2VtYXBob3JlT2JqLnNlbWFwaG9yZXNbc2VtYXBob3JlSWRdID0gXCJhdmFpbGFibGVcIjtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfWVsc2V7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNlbWFwaG9yZU9iajtcblxufV0pO1xuIiwicG1iX2ltLnNlcnZpY2VzLmZhY3RvcnkoJ2xvY2F0aW9uQVBJJywgWyckaHR0cCcsICckcScsICdBcGlJbUVuZHBvaW50JywgJ0FwaURhdGFFbmRwb2ludCcsICdDb25maWdTZXJ2aWNlJywgJ0xvY2F0aW9uc1NlcnZpY2UnLCBmdW5jdGlvbigkaHR0cCwgJHEsIEFwaUltRW5kcG9pbnQsIEFwaURhdGFFbmRwb2ludCwgQ29uZmlnU2VydmljZSwgTG9jYXRpb25zU2VydmljZSkge1xuXG4gIHZhciByZXN0UHJlZmZpeCA9IFwidWJpY2FjaW9uZXNSZXN0UHJvZFwiO1xuXG5cbiAgdmFyIGxvY2F0aW9uQVBJID0ge307XG5cbiAgbG9jYXRpb25BUEkuc2VhcmNoTG9jYXRpb25CeVN0ciA9IGZ1bmN0aW9uKF9sb2NhdGlvbikge1xuICAgIC8qcmV0dXJuICRodHRwLmdldChBcGlJbUVuZHBvaW50LnVybCArICcvJyArIHJlc3RQcmVmZml4ICsgJy9jYWxsZXMnLCB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIG5vbWJyZTogX2xvY2F0aW9uXG4gICAgICB9XG4gICAgfSk7Ki9cbiAgICB2YXIgYmFzZVVSTCA9IENvbmZpZ1NlcnZpY2UuYmFzZVVSTCArIFwiL2FqYXgvZ2VvY29kZT90ZXJtPVwiICsgTG9jYXRpb25zU2VydmljZS5zZWxlY3RlZF9jb3VuY2lsICsgXCIsXCIgKyBfbG9jYXRpb247XG4gICAgcmV0dXJuICRodHRwLmdldChiYXNlVVJMLCB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgcGFyYW1zOiB7fVxuICAgIH0pO1xuICB9O1xuXG5cbiAgbG9jYXRpb25BUEkuc2VhcmNoRXNxdWluYUJ5U3RyID0gZnVuY3Rpb24oX2xvY2F0aW9uKSB7XG4gICAgLy9jb25zb2xlLmxvZyhcInNlYXJjaEVzcXVpbmFCeVN0ciA9IFwiICsgSlNPTi5zdHJpbmdpZnkoX2xvY2F0aW9uKSk7XG4gICAgLy9yZXR1cm4gJGh0dHAuZ2V0KEFwaUltRW5kcG9pbnQudXJsICsgJy8nICsgcmVzdFByZWZmaXggKyAnL2VzcXVpbmEvJyArIF9sb2NhdGlvbi5jYWxsZSArICcvJyArIF9sb2NhdGlvbi5lc3F1aW5hLCB7XG4gICAgICAvKnJldHVybiAkaHR0cC5nZXQoQXBpSW1FbmRwb2ludC51cmwgKyAnLycgKyByZXN0UHJlZmZpeCArICcvY3J1Y2VzLycgKyBfbG9jYXRpb24uY2FsbGUgKyAnLycsXG4gICAgICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIG5vbWJyZTogX2xvY2F0aW9uLmVzcXVpbmFcbiAgICAgICAgfVxuICAgICAgfSk7Ki9cblxuICAgICAgdmFyIGJhc2VVUkwgPSBDb25maWdTZXJ2aWNlLmJhc2VVUkwgKyBcIi9hamF4L2dlb2NvZGU/dGVybT1cIiArIExvY2F0aW9uc1NlcnZpY2Uuc2VsZWN0ZWRfY291bmNpbCArIFwiLFwiXG4gICAgICAgICAgICAgICAgICAgICsgX2xvY2F0aW9uLmNhbGxlICsgXCIsXCIgKyBfbG9jYXRpb24uZXNxdWluYTtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoYmFzZVVSTCwge1xuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBwYXJhbXM6IHt9XG4gICAgICB9KTtcbiAgfTtcblxuICBsb2NhdGlvbkFQSS5nZXRMb2NhdGlvbkdlb20gPSBmdW5jdGlvbihfbG9jYXRpb24pIHtcbiAgICB2YXIgdXJsID0gQXBpSW1FbmRwb2ludC51cmwgKyAnLycgKyByZXN0UHJlZmZpeCArIGxvY2F0aW9uQVBJLmdldFBhcmFtUGF0aEJ5VGlwbyhfbG9jYXRpb24udGlwbyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfbG9jYXRpb24ucGF0aFBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgdXJsICs9ICcvJyArIF9sb2NhdGlvbi5wYXRoUGFyYW1zW2ldO1xuICAgIH1cbiAgICByZXR1cm4gJGh0dHAuZ2V0KGJhc2VVUkwpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSk7XG4gIH07XG5cbiAgbG9jYXRpb25BUEkuZ2V0TG9jYXRpb25HZW9tUE1CID0gZnVuY3Rpb24oY2FsbGUsZXNxdWluYV9udW1lcm8sdGlwbykge1xuICAgIHZhciBiYXNlVVJMID0gQ29uZmlnU2VydmljZS5iYXNlVVJMICsgXCIvYWpheC9nZW9jb2RlP3Rlcm09XCIgKyBMb2NhdGlvbnNTZXJ2aWNlLnNlbGVjdGVkX2NvdW5jaWwgKyBcIixcIlxuICAgICAgICAgICAgICArIGNhbGxlICsgXCIsXCIgKyBlc3F1aW5hX251bWVybyArIFwiLFwiICsgdGlwbztcblxuICAgIHJldHVybiAkaHR0cC5nZXQoYmFzZVVSTCk7XG5cbiAgfTtcblxuICBsb2NhdGlvbkFQSS5nZXRQYXJhbVBhdGhCeVRpcG8gPSBmdW5jdGlvbihfdGlwbykge1xuXG4gICAgdmFyIHJlc3RHZW9EYXRhU2VydmljZVBhdGggPSB7XG4gICAgICAnRVNRVUlOQSc6XCIvZXNxdWluYVwiLFxuICAgICAgJ0RJUkVDQ0lPTic6XCIvZGlyZWNjaW9uXCJcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJlc3RHZW9EYXRhU2VydmljZVBhdGhbX3RpcG9dO1xuXG5cbiAgfTtcblxuICByZXR1cm4gbG9jYXRpb25BUEk7XG5cbn1dKTtcbiIsInBtYl9pbS5zZXJ2aWNlcy5mYWN0b3J5KCdfJywgW2Z1bmN0aW9uKCkge1xuICByZXR1cm4gd2luZG93Ll87IC8vVW5kZXJzY29yZSBtdXN0IGFscmVhZHkgYmUgbG9hZGVkIG9uIHRoZSBwYWdlXG59XSk7XG4iLCJwbWJfaW0uc2VydmljZXMuZmFjdG9yeSgnVXNlclNlcnZpY2UnLCBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHtcblxuICAvL3ZhciBiYXNlVVJMID0gXCJodHRwOi8vcG1idXkuZGV2ZWxvcG1lbnQuZGF0YXV5Lm9yZy9hdXRoL2FqYXgvXCI7XG4gIHZhciBVc2VyT2JqID0ge307XG4gIFVzZXJPYmoudWlkID0gbnVsbDtcbiAgVXNlck9iai5uYW1lID0gbnVsbDtcbiAgVXNlck9iai5lbWFpbCA9IG51bGw7XG4gIFVzZXJPYmoucGFzc3dvcmQgPSBudWxsO1xuICBVc2VyT2JqLnBpY3R1cmVfdXJsID0gXCJ1cmwoLi9pbWcvaWNvbi11c2VyLWFub255bW91cy5wbmcpXCI7XG4gIFVzZXJPYmouc2hvd19sb2NhdGlvbiA9IG51bGw7XG5cblxuICBVc2VyT2JqLnNhdmVfdXNlcl9kYXRhID0gZnVuY3Rpb24gKHVzZXJfbmFtZSwgdXNlcl9wYXNzd29yZCwgdXNlcl9waWN0dXJlX3VybCwgc2hvd19sb2NhdGlvbiwgdWlkLCBzdGF0dXMsIGdlbmRlciwgaW50ZXJlc3RlZCkge1xuICAgICAgVXNlck9iai51aWQgPSB1aWQ7XG4gICAgICBVc2VyT2JqLm5hbWUgPSB1c2VyX25hbWU7XG4gICAgICBVc2VyT2JqLnBhc3N3b3JkID0gdXNlcl9wYXNzd29yZDtcbiAgICAgIFVzZXJPYmoucGljdHVyZV91cmwgPSB1c2VyX3BpY3R1cmVfdXJsO1xuICAgICAgVXNlck9iai5zaG93X2xvY2F0aW9uID0gc2hvd19sb2NhdGlvbjtcbiAgICAgIFVzZXJPYmouc3RhdHVzID0gc3RhdHVzO1xuICAgICAgVXNlck9iai5nZW5kZXIgPSBnZW5kZXI7XG4gICAgICBVc2VyT2JqLmludGVyZXN0ZWQgPSBpbnRlcmVzdGVkO1xuXG4gICAgICAvL1NBVkUgSU4gUE9VQ0hEQlxuICB9XG5cbiAgVXNlck9iai5lcmFzZV91c2VyX2RhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgVXNlck9iai5uYW1lID0gbnVsbDtcbiAgICBVc2VyT2JqLmVtYWlsID0gbnVsbDtcbiAgICBVc2VyT2JqLnBhc3N3b3JkID0gbnVsbDtcbiAgICBVc2VyT2JqLmlkZW50aXR5X2RvY3VtZW50ID0gbnVsbDtcbiAgICBVc2VyT2JqLnBob25lID0gbnVsbDtcbiAgICBVc2VyT2JqLnBpY3R1cmVfdXJsID0gbnVsbDtcbiAgICAvL0RFTEVURSBJTiBQT1VDSERCXG4gIH1cblxuICBVc2VyT2JqLmdldF91c2VyX2RhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy9MRVZBTlRBIERFIFBPVUNIREIgTE9TIERBVE9TIERFTCBVU1VBUklPLiBTSSBIQVkgTE9TIFBPTkUgRU4gTEFTIFZBUklBQkxFUyBERUwgU0VSVklDSU8uIFNJIE5PIEhBWSBQT05FIFRPRE8gTlVMTFxuICB9XG5cbiAgVXNlck9iai5hZGRfcGhvdG8gPSBmdW5jdGlvbiAodXNlcl9waWN0dXJlX3VybCkge1xuICAgIFVzZXJPYmoucGljdHVyZV91cmwgPSB1c2VyX3BpY3R1cmVfdXJsO1xuICB9XG5cbiAgVXNlck9iai5pc0xvZ2dlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZihVc2VyT2JqLm5hbWUhPW51bGwgJiYgVXNlck9iai5uYW1lIT1cIlwiKXtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1lbHNle1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG5cbiAgcmV0dXJuIFVzZXJPYmo7XG5cbn1dKTtcbiIsInBtYl9pbS5zZXJ2aWNlcy5mYWN0b3J5KCdWYWxpZGF0aW9uU2VydmljZScsIFsnJGh0dHAnLCckaW9uaWNQb3B1cCcsIGZ1bmN0aW9uKCRodHRwLCRpb25pY1BvcHVwKSB7XG5cbiAgcmV0dXJuIHtcbiAgICBpc01vYmlsZURldmljZTogZnVuY3Rpb24oKXtcbiAgICAgIGlmKHdpbmRvdy5jb3Jkb3ZhKXtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICB9LFxuXG4gICAgdmFsaWRhdGVfbm90X2VtcHR5OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYodmFsdWUhPW51bGwgJiYgdmFsdWUhPVwidW5kZWZpbmVkXCIgJiYgdmFsdWUhPVwiXCIpe1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdmFsaWRhdGVfdHdvX3dvcmRzOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYodmFsdWUhPW51bGwgJiYgdmFsdWUhPVwidW5kZWZpbmVkXCIgJiYgdmFsdWUhPVwiXCIpe1xuICAgICAgICAgIHZhciB2YWx1ZXMgPSB2YWx1ZS5zcGxpdCgnICcpLmZpbHRlcihmdW5jdGlvbih2KXtyZXR1cm4gdiE9PScnfSk7XG4gICAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgIC8vdHdvIG9yIG1vcmUgd29yZHNcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy9ub3QgZW5vdWdoIHdvcmRzXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB2YWxpZGF0ZV9lcXVhbHNUbzogZnVuY3Rpb24gKHZhbHVlLHNlY29uZFZhbHVlKSB7XG4gICAgICBpZih2YWx1ZT09c2Vjb25kVmFsdWUpe1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1lbHNle1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHZhbGlkYXRlX2VtYWlsOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYodmFsdWUhPW51bGwgJiYgdmFsdWUhPVwidW5kZWZpbmVkXCIgJiYgdmFsdWUhPVwiXCIpe1xuICAgICAgICAgIHZhciByZSA9IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xuICAgICAgICAgIHJldHVybiByZS50ZXN0KHZhbHVlKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHZhbGlkYXRlX2lkZG9jX3V5OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmKHZhbHVlIT1udWxsICYmIHZhbHVlIT1cInVuZGVmaW5lZFwiICYmIHZhbHVlIT1cIlwiKXtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcRC9nLCAnJyk7XG4gICAgICAgICAgdmFyIGRpZyA9IHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIHZhciBhID0gMDsgdmFyIGkgPSAwO1xuICAgICAgICAgIGlmKHZhbHVlLmxlbmd0aCA8PSA2KXtcbiAgICAgICAgICAgIGZvcihpID0gdmFsdWUubGVuZ3RoOyBpIDwgNzsgaSsrKXtcbiAgICAgICAgICAgICAgdmFsdWUgPSAnMCcgKyB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yKGkgPSAwOyBpIDwgNzsgaSsrKXtcbiAgICAgICAgICAgIGEgKz0gKHBhcnNlSW50KFwiMjk4NzYzNFwiW2ldKSAqIHBhcnNlSW50KHZhbHVlW2ldKSkgJSAxMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgICBpZihhJTEwID09PSAwKXtcbiAgICAgICAgICAgIHJlc3VsdCA9IDA7XG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICByZXN1bHQgPSAxMCAtIGEgJSAxMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoZGlnID09IHJlc3VsdCl7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICB9ZWxzZXtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dKTtcbiJdfQ==
